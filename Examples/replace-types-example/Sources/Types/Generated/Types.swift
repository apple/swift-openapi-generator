// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
import Foundation
import ExternalLibrary
/// A type that performs HTTP operations defined by the OpenAPI document.
package protocol APIProtocol: Sendable {
    /// - Remark: HTTP `GET /user`.
    /// - Remark: Generated from `#/paths//user/get(getUser)`.
    func getUser(_ input: Operations.GetUser.Input) async throws -> Operations.GetUser.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// - Remark: HTTP `GET /user`.
    /// - Remark: Generated from `#/paths//user/get(getUser)`.
    package func getUser(
        query: Operations.GetUser.Input.Query = .init(),
        headers: Operations.GetUser.Input.Headers = .init()
    ) async throws -> Operations.GetUser.Output {
        try await getUser(Operations.GetUser.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
package enum Servers {
    /// Example service deployment.
    package enum Server1 {
        /// Example service deployment.
        package static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://example.com/api",
                variables: []
            )
        }
    }
    /// Example service deployment.
    @available(*, deprecated, renamed: "Servers.Server1.url")
    package static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://example.com/api",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
package enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    package enum Schemas {
        /// - Remark: Generated from `#/components/schemas/UUID`.
        package typealias Uuid = Foundation.UUID
        /// A value with the greeting contents.
        ///
        /// - Remark: Generated from `#/components/schemas/User`.
        package struct User: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/User/id`.
            package var id: Components.Schemas.Uuid?
            /// - Remark: Generated from `#/components/schemas/User/favorite_prime_number`.
            package var favoritePrimeNumber: ExternalLibrary.PrimeNumber?
            /// - Remark: Generated from `#/components/schemas/User/foo`.
            package var foo: ExternalLibrary.ExternalObject?
            /// A container of undocumented properties.
            package var additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer]
            /// Creates a new `User`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - favoritePrimeNumber:
            ///   - foo:
            ///   - additionalProperties: A container of undocumented properties.
            package init(
                id: Components.Schemas.Uuid? = nil,
                favoritePrimeNumber: ExternalLibrary.PrimeNumber? = nil,
                foo: ExternalLibrary.ExternalObject? = nil,
                additionalProperties: [String: OpenAPIRuntime.OpenAPIObjectContainer] = .init()
            ) {
                self.id = id
                self.favoritePrimeNumber = favoritePrimeNumber
                self.foo = foo
                self.additionalProperties = additionalProperties
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case favoritePrimeNumber = "favorite_prime_number"
                case foo
            }
            package init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.id = try container.decodeIfPresent(
                    Components.Schemas.Uuid.self,
                    forKey: .id
                )
                self.favoritePrimeNumber = try container.decodeIfPresent(
                    ExternalLibrary.PrimeNumber.self,
                    forKey: .favoritePrimeNumber
                )
                self.foo = try container.decodeIfPresent(
                    ExternalLibrary.ExternalObject.self,
                    forKey: .foo
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "id",
                    "favorite_prime_number",
                    "foo"
                ])
            }
            package func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    self.id,
                    forKey: .id
                )
                try container.encodeIfPresent(
                    self.favoritePrimeNumber,
                    forKey: .favoritePrimeNumber
                )
                try container.encodeIfPresent(
                    self.foo,
                    forKey: .foo
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    package enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    package enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    package enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    package enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
package enum Operations {
    /// - Remark: HTTP `GET /user`.
    /// - Remark: Generated from `#/paths//user/get(getUser)`.
    package enum GetUser {
        package static let id: Swift.String = "getUser"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The name of the user
                ///
                /// - Remark: Generated from `#/paths/user/GET/query/name`.
                package var name: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: The name of the user
                package init(name: Swift.String? = nil) {
                    self.name = name
                }
            }
            package var query: Operations.GetUser.Input.Query
            /// - Remark: Generated from `#/paths/user/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.GetUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.GetUser.Input.Query = .init(),
                headers: Operations.GetUser.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.User)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.User {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.GetUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.GetUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A success response with the user.
            ///
            /// - Remark: Generated from `#/paths//user/get(getUser)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.GetUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
