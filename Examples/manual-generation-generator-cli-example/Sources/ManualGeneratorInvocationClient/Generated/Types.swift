// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// - Remark: HTTP `GET /greet`.
    /// - Remark: Generated from `#/paths//greet/get(getGreeting)`.
    func getGreeting(_ input: Operations.getGreeting.Input) async throws -> Operations.getGreeting.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// - Remark: HTTP `GET /greet`.
    /// - Remark: Generated from `#/paths//greet/get(getGreeting)`.
    internal func getGreeting(
        query: Operations.getGreeting.Input.Query = .init(),
        headers: Operations.getGreeting.Input.Headers = .init()
    ) async throws -> Operations.getGreeting.Output {
        try await getGreeting(Operations.getGreeting.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    /// Example service deployment.
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://example.com/api",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {
        /// A value with the greeting contents.
        ///
        /// - Remark: Generated from `#/components/schemas/Greeting`.
        internal struct Greeting: Codable, Hashable, Sendable {
            /// The string representation of the greeting.
            ///
            /// - Remark: Generated from `#/components/schemas/Greeting/message`.
            internal var message: Swift.String
            /// Creates a new `Greeting`.
            ///
            /// - Parameters:
            ///   - message: The string representation of the greeting.
            internal init(message: Swift.String) {
                self.message = message
            }
            internal enum CodingKeys: String, CodingKey {
                case message
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// - Remark: HTTP `GET /greet`.
    /// - Remark: Generated from `#/paths//greet/get(getGreeting)`.
    internal enum getGreeting {
        internal static let id: Swift.String = "getGreeting"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/greet/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// The name used in the returned greeting.
                ///
                /// - Remark: Generated from `#/paths/greet/GET/query/name`.
                internal var name: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: The name used in the returned greeting.
                internal init(name: Swift.String? = nil) {
                    self.name = name
                }
            }
            internal var query: Operations.getGreeting.Input.Query
            /// - Remark: Generated from `#/paths/greet/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getGreeting.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getGreeting.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getGreeting.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.getGreeting.Input.Query = .init(),
                headers: Operations.getGreeting.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/greet/GET/responses/200/content`.
                @frozen internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/greet/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Greeting)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Greeting {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getGreeting.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getGreeting.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A success response with a greeting.
            ///
            /// - Remark: Generated from `#/paths//greet/get(getGreeting)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getGreeting.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getGreeting.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
