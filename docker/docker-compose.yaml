# NOTE: This file is not designed to be run independently.
#
# Instead, use it with a file for a specific OS and Swift version, for example:
#
# % docker-compose \
#   -f docker/docker-compose.yaml \
#   -f docker/docker-compose.2204.59.yaml \
#   run test
#
version: "3"

services:
  runtime-setup:
    image: &image swift-openapi-generator:default
    build:
      context: .
      dockerfile: Dockerfile

  common: &common
    image: *image
    depends_on: [runtime-setup]
    volumes:
      - ~/.ssh:/root/.ssh
      - ..:/code:z
    working_dir: /code

  soundness:
    <<: *common
    command: /bin/bash -xcl "swift -version && uname -a && ./scripts/soundness.sh"

  test:
    <<: *common
    command: /bin/bash -xcl "swift $${SWIFT_TEST_VERB-test} $${WARN_AS_ERROR_ARG-} $${SANITIZER_ARG-} $${IMPORT_CHECK_ARG-} $${STRICT_CONCURRENCY_ARG-}"

  shell:
    <<: *common
    entrypoint: /bin/bash

  integration-test:
    <<: *common
    command: /bin/bash -xcl "swift -version && uname -a && bash ./scripts/run-integration-test.sh"
    environment:
      SWIFT_OPENAPI_GENERATOR_REPO_URL: file:///code

  compatibility-test:
    <<: *common
    command: /bin/bash -xcl "cat /proc/cpuinfo && cat /proc/meminfo && swift test --filter $${SWIFT_OPENAPI_COMPATIBILITY_TEST_FILTER}"
    environment:  # These can be overridden when running locally.
      SWIFT_OPENAPI_COMPATIBILITY_TEST_ENABLE: "true"
      SWIFT_OPENAPI_COMPATIBILITY_TEST_SKIP_BUILD: "true"
      SWIFT_OPENAPI_COMPATIBILITY_TEST_FILTER: OpenAPIGeneratorReferenceTests.CompatibilityTest
      SWIFT_OPENAPI_COMPATIBILITY_TEST_PARALLEL_CODEGEN: "true"
      SWIFT_OPENAPI_COMPATIBILITY_TEST_NUM_BUILD_JOBS: 1

  docc-test:
    <<: *common
    command: /bin/bash -xcl "swift -version && uname -a && bash ./scripts/check-for-docc-warnings.sh"
    environment:
      DOCC_TARGET: swift-openapi-generator

  examples:
    <<: *common
    command: /bin/bash -xcl "swift -version && uname -a && true" # Placeholder to bootstrap pipeline.
