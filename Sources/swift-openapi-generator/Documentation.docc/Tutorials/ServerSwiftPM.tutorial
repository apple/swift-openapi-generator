@Tutorial(time: 20) {
    @XcodeRequirement(title: "Swift 5.9 ", destination: "https://developer.apple.com/download/applications/")

    @Intro(title: "Generating server stubs in a Swift package") {

        This tutorial guides you through building _GreetingService_â€”an API server for a fictitious service that returns a personalized greeting.

        ```console
        % curl 'localhost:8080/api/greet?name=Jane'
        {
          "message" : "Hello, Jane"
        }
        ```

        The API for the service is defined using OpenAPI and you'll create a Swift server for this service, from scratch!

        Your Swift package will make use of the Swift OpenAPI Generator plugin to generate the code you'll use to implement this API.

        > Tip: The [hello-world-vapor-server-example package](https://github.com/apple/swift-openapi-generator/tree/main/Examples/hello-world-vapor-server-example) contains the result of this tutorial, in case you're looking for a working example.
    }
    
    @Section(title: "Creating a new Swift package") {
        Create a brand-new Swift package for the server.
        @Steps {
            @Step {
                Create a new directory.
                @Code(name: "console", file: server.console.1.0.txt, reset: true)
            }
            @Step {
                Create a new package using the Swift package manager CLI.
                @Code(name: "console", file: server.console.1.1.txt)
            }
            @Step {
                Open the new package in Xcode using the `open` command.
                @Code(name: "console", file: server.console.1.2.txt)
            }
        }
    }
    
    @Section(title: "Configuring your project to use Swift OpenAPI Generator") {
        Let's extend this sample package to implement our `GreetingService` API.
        @Steps {
            @Step {
                Copy in the OpenAPI document into the `Sources` directory, and name it `openapi.yaml`.
                @Code(name: "Sources/openapi.yaml", file: server.openapi.0.yaml)
            }
            @Step {
                We also need a config file that controls the behavior of the Swift
                OpenAPI Generator plugin. Create a file in the same directory called `openapi-generator-config.yaml`, with the following contents.
                
                @Code(name: "Sources/openapi-generator-config.yaml", file: server.openapi-generator-config.yaml)
            }
            @Step {
                Specify the minimum platforms the package supports.
                @Code(name: "Package.swift", file: server.Package.1.swift, previousFile: server.Package.0.swift)                
            }
            @Step {
                Then, we'll add the package dependencies.
                
                We added dependencies on the generator package plugin, which generates code at build time; the runtime package, which allows us to make use of the generated code; and, because Swift OpenAPI Generator has been built with an extensible transport abstraction, a concrete transport implementation library. Here we've selected the transport implementation that uses the Vapor web framework.

                @Code(name: "Package.swift", file: server.Package.2.swift)
            }
            @Step {
                Now we can update our target to make use of the Swift OpenAPI Generator plugin.
                @Code(name: "Package.swift", file: server.Package.3.swift)
            }
            @Step {
                Next, we need to declare the runtime dependencies for our target.
                @Code(name: "Package.swift", file: server.Package.4.swift)
            }
            @Step {
                Build the project now to ensure it's configured correctly.
                
                The Swift OpenAPI Generator build plugin gets built and generates the server stubs for the `GreetingService` behind the scenes, making them available to use in the next section.
                @Code(name: "Package.swift", file: server.Package.5.swift)
            }
        }
    }
    
    @Section(title: "Using the generated code in your target") {
        Now we're ready to use the code that the plugin generated behind the scenes to
        serve some personalized greetings!
        
        @Steps {
            @Step {
                Navigate to `Sources/main.swift`, which is the entry point for our program.
                
                Currently it just prints "Hello, world!" to the console. We'll make changes to this file to make use of the code that was generated by the plugin to implement the `GreetingService` API.
                @Code(name: "main.swift", file: server.main.0.swift, reset: true)
            }
            @Step {
                Define a new type that conforms to the generated protocol.
                
                The compiler requires us to provide a function `getGreeting`.
                
                @Code(name: "main.swift", file: server.main.1.1.swift)
            }
            @Step {
                Create a new Vapor application and use your handler implementation to populate the routes the server will respond to.
                
                @Code(name: "main.swift", file: server.main.1.2.swift)
            }
            @Step {
                Run the server and test with `curl`.
                
                @Code(name: "console", file: server.console.2.txt)
            }
        }
    }
    @Section(title: "Adding a new API operation") {
        
        Finally, let's extend our API by adding a new operation to the OpenAPI document and server.
        
        The new operation will return a random emoji that represents a type of greeting.
        
        @Steps {
            @Step {
                Navigate to `Sources/openapi.yaml` and add the `getEmoji` operation by defining a new path, `/emoji`, with method, `get`.
                
                Note, this operation uses `text/plain` as the content type for its response.
                
                @Code(name: "openapi.yaml", file: server.openapi.1.yaml, previousFile: server.openapi.0.yaml)
            }
            
            @Step {
                Recompile the project.
                
                Compilation fails in `main.swift` because our implementation does not provide a handler for our new operation. The Swift compiler informs us that `GreetingServiceAPIImpl` does not conform to `APIProtocol` and guides us to add the missing function.
                
                @Code(name: "main.swift", file: server.main.1.2.swift)
            }
            
            @Step {
                Add the missing function to the handler.
                
                The function picks a greeting emoji at random and returns it as the body of the operation output.
                
                @Code(name: "main.swift", file: server.main.2.swift, previousFile: server.main.1.2.swift)
            }
            
            @Step {
                Run the server and test the new operation with `curl`.
                
                @Code(name: "console", file: server.console.3.txt)
            }
        }
    }
}

