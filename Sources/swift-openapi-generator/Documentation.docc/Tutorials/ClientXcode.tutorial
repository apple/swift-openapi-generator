@Tutorial(time: 20) {
    @XcodeRequirement(title: "Swift 5.9 ", destination: "https://developer.apple.com/download/applications/")

    @Intro(title: "Generating a client in an Xcode project") {
        This tutorial guides you through building _GreetingServiceClient_—an API client for a fictitious service that returns a personalized greeting.

        ```console
        % curl 'localhost:8080/api/greet?name=Jane'
        {
          "message" : "Hello, Jane"
        }
        ```

        The API for the service is defined using OpenAPI and you'll create a Swift client for this service, from scratch!

        Your Xcode project will make use of the Swift OpenAPI Generator plugin to generate the code you'll use to call this API from your existing app.
    }
    
    @Section(title: "(Optional) Downloading and running the server locally for testing") {

        In the next section of the guide we will create a client for this service. In order to execute requests, you can download the example server implementation and run it locally.

        @Steps {
            @Step {
                Clone the Git repository and change the current working directory to the nested example package.
                @Code(name: "console", file: client.console.1.0.txt, reset: true)
            }
            @Step {
                Build and run the service.
                @Code(name: "console", file: client.console.1.1.txt)
            }
            @Step {
                While keeping the server running, in a separate Terminal window, test that the server is working by using `curl` from the command line.
                @Code(name: "console", file: client.console.1.2.txt)
            }
        }
    }
    
    @Section(title: "(Optional) Creating a new Xcode target") {
        In an existing Xcode project that already contains an app target, create a new Xcode target for the generated client.
        
        While this isn't required and you can generate the client Swift code into your app target, it is recommended to keep the generated code in a separate framework to avoid potential file and type name conflicts.
        @Steps {
            @Step {
                In the Project Navigator, click on the project.
            }
            @Step {
                In the Project Editor, click the plus button at the bottom of the list titled Targets.
            }
            @Step {
                Select the Framework template, click Next.
            }
            @Step {
                Give the framework a name, for example "GeneratedClient", make sure the framework gets embedded in your app, and click Finish.
            }
        }
    }
    
    @Section(title: "Configuring your target to use the Swift OpenAPI Generator plugin") {
        
        Let's extend this sample package to call our `GreetingService` API.
        
        We will generate the client code into an Xcode target created in the previous step, called "GeneratedClient". You can generate the code into any target in your project.
        
        @Steps {
            @Step {
                Add the two configuration files required by the Swift OpenAPI Generator build plugin.
                
                The first is the OpenAPI document. Add it to to the "GeneratedClient" target by right-clicking on the "GeneratedClient" folder in the project navigator, and choosing Add Files to "GeneratedClient"…
                @Code(name: "Sources/openapi.yaml", file: client.openapi.yaml)
            }
            @Step {
               If you launched a local server in the previous section, add a localhost server entry to the OpenAPI document.
               
               This will make it easy to call the local server from generated code in the next section.
               @Code(name: "Sources/openapi.yaml", file: client.openapi.2.yaml)
            }
            @Step {
                The second file to add is a configuration file that controls the behavior of the build plugin. Create a file in the same target called `openapi-generator-config.yaml`, with the following contents.
                
                @Code(name: "Sources/openapi-generator-config.yaml", file: client.openapi-generator-config.yaml)
            }
            @Step {
                With the configuration files in place, we will add the following three package dependencies: the build plugin, the Runtime library, and a concrete client transport that uses URLSession to send HTTP requests. 
                
                Select the project in the Project Navigator again, select the project in the Project Editor, and go to Package Dependencies.
            }
            @Step {
                Under Packages, click the plus button to add a new package dependency.
            }
            @Step {
                Find the `swift-openapi-generator` package in an existing collection, or type in the full URL to the search field at the top: `https://github.com/apple/swift-openapi-generator`.
                
                Change the dependency rule to `Up to Next Minor Version`.
            }
            @Step {
                Since the package provides a build plugin that we will integrate later, do not check any products on the next Choose Package Products screen. 
                
                Click Add Package.
            }
            @Step {
                Repeat the same steps two more times, with the packages `https://github.com/apple/swift-openapi-runtime` and `https://github.com/apple/swift-openapi-urlsession`.
                
                This time, do check the library products to be added to the **GeneratedClient target**. Note, this might not be the default target Xcode offers to add the libraries to.
            }
            @Step {
                To finish configuring the build plugin in your target, navigate to the Build Phases tab of the GeneratedClient in the Project Editor, and expand the Run Build Tool Plug-ins section.
                
                Click the plus button and add the OpenAPIGenerator plugin.
            }
            @Step {
                To verify everything is configured correctly, choose Product -> Build. If this is the first time using the plugin, you will be asked for confirmation that you trust the plugin. To continue, click Trust & Enable All.
                
                Xcode now builds the Swift OpenAPI Generator plugin itself, and then runs it on the configuration files `openapi.yaml` and `openapi-generator-config.yaml` to generate a Swift client for GreetingService. Once it finishes, the `Client` type will become available in the GeneratedClient target.
            }
        }
    }
    
    @Section(title: "Using the generated code in your target") {
        
        Now we're ready to use the code that the plugin generated behind the scenes to
        fetch some personalized greetings!
        
        @Steps {
            @Step {
                Create a new Swift file in the GeneratedClient framework called `GreetingClient.swift`.
                
                Import the OpenAPIURLSession library, which provides a transport implementation that uses Foundation's URLSession to perform network calls.
                
                @Code(name: "GreetingClient.swift", file: client.xcode.0.swift, reset: true)
            }
            @Step {
                Define a new struct called `GreetingClient` with an initializer and an empty method that will fetch cats using the generated client.
                
                @Code(name: "GreetingClient.swift", file: client.xcode.1.swift)
            }
            @Step {
                Next we'll create an instance of the generated client.

                Note: `Servers.server2()` is the localhost service, defined in the OpenAPI document.
                
                @Code(name: "GreetingClient.swift", file: client.xcode.2.swift)
            }
            @Step {
                Finally, we can use the client to make a request and get a response.
                
                @Code(name: "GreetingClient.swift", file: client.xcode.3.swift)
            }
            @Step {
                Add a `switch` statement to handle the different possible responses from the server.
                
                Something's missing here, and if you recompile your project you'll see that the compiler helpfully tells you that your `switch` statement didn't cover all scenarios.
                
                @Code(name: "GreetingClient.swift", file: client.xcode.4.swift)
            }
            @Step {
                In the event the server provides a response that doesn't conform to the API specification, you still have an opportunity as a client to handle it gracefully. We'll do so, by returning a default greeting that includes the unexpected status code, indicating that our client doesn't know what to do with this because it hasn't been updated to handle this kind of response.
                
                @Code(name: "GreetingClient.swift", file: client.xcode.5.swift)
            }
            @Step {
                Let's extract and return the content from the response body.
                
                The `switch` statement over the body allows you to handle the different content types that are specified for the API operation.
                
                @Code(name: "GreetingClient.swift", file: client.xcode.6.swift)
            }
            @Step {
                Finally, in your app target, import the framework with the generated client and fetch the personalized greeting, for example to show it in the UI.
                
                @Code(name: "App.swift", file: client.xcode.7.swift, reset: true)
            }
        }
    }
}

