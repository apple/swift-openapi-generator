// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List all Todo items.
    ///
    /// - Remark: HTTP `GET /todo/`.
    /// - Remark: Generated from `#/paths//todo//get`.
    func getTodo(_ input: Operations.GetTodo.Input) async throws -> Operations.GetTodo.Output
    /// Create a new incomplete Todo item.
    ///
    /// - Remark: HTTP `POST /todo/`.
    /// - Remark: Generated from `#/paths//todo//post`.
    func postTodo(_ input: Operations.PostTodo.Input) async throws -> Operations.PostTodo.Output
    /// Get a single Todo item.
    ///
    /// - Remark: HTTP `GET /todo/{id}`.
    /// - Remark: Generated from `#/paths//todo/{id}/get`.
    func getTodoId(_ input: Operations.GetTodoId.Input) async throws -> Operations.GetTodoId.Output
    /// Delete a Todo item.
    ///
    /// - Remark: HTTP `DELETE /todo/{id}`.
    /// - Remark: Generated from `#/paths//todo/{id}/delete`.
    func deleteTodoId(_ input: Operations.DeleteTodoId.Input) async throws -> Operations.DeleteTodoId.Output
    /// Complete a Todo.
    ///
    /// - Remark: HTTP `PUT /todo/{id}/complete`.
    /// - Remark: Generated from `#/paths//todo/{id}/complete/put`.
    func putTodoIdComplete(_ input: Operations.PutTodoIdComplete.Input) async throws -> Operations.PutTodoIdComplete.Output
    /// creates an account
    ///
    /// register a new account to be used
    ///
    /// - Remark: HTTP `POST /todo/user/create`.
    /// - Remark: Generated from `#/paths//todo/user/create/post(create_user)`.
    func createUser(_ input: Operations.CreateUser.Input) async throws -> Operations.CreateUser.Output
    /// This documentation page.
    ///
    /// - Remark: HTTP `GET /docs/`.
    /// - Remark: Generated from `#/paths//docs//get`.
    func getDocs(_ input: Operations.GetDocs.Input) async throws -> Operations.GetDocs.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List all Todo items.
    ///
    /// - Remark: HTTP `GET /todo/`.
    /// - Remark: Generated from `#/paths//todo//get`.
    public func getTodo(headers: Operations.GetTodo.Input.Headers = .init()) async throws -> Operations.GetTodo.Output {
        try await getTodo(Operations.GetTodo.Input(headers: headers))
    }
    /// Create a new incomplete Todo item.
    ///
    /// - Remark: HTTP `POST /todo/`.
    /// - Remark: Generated from `#/paths//todo//post`.
    public func postTodo(
        headers: Operations.PostTodo.Input.Headers = .init(),
        body: Operations.PostTodo.Input.Body
    ) async throws -> Operations.PostTodo.Output {
        try await postTodo(Operations.PostTodo.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get a single Todo item.
    ///
    /// - Remark: HTTP `GET /todo/{id}`.
    /// - Remark: Generated from `#/paths//todo/{id}/get`.
    public func getTodoId(
        path: Operations.GetTodoId.Input.Path,
        headers: Operations.GetTodoId.Input.Headers = .init()
    ) async throws -> Operations.GetTodoId.Output {
        try await getTodoId(Operations.GetTodoId.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a Todo item.
    ///
    /// - Remark: HTTP `DELETE /todo/{id}`.
    /// - Remark: Generated from `#/paths//todo/{id}/delete`.
    public func deleteTodoId(
        path: Operations.DeleteTodoId.Input.Path,
        headers: Operations.DeleteTodoId.Input.Headers = .init()
    ) async throws -> Operations.DeleteTodoId.Output {
        try await deleteTodoId(Operations.DeleteTodoId.Input(
            path: path,
            headers: headers
        ))
    }
    /// Complete a Todo.
    ///
    /// - Remark: HTTP `PUT /todo/{id}/complete`.
    /// - Remark: Generated from `#/paths//todo/{id}/complete/put`.
    public func putTodoIdComplete(
        path: Operations.PutTodoIdComplete.Input.Path,
        headers: Operations.PutTodoIdComplete.Input.Headers = .init()
    ) async throws -> Operations.PutTodoIdComplete.Output {
        try await putTodoIdComplete(Operations.PutTodoIdComplete.Input(
            path: path,
            headers: headers
        ))
    }
    /// creates an account
    ///
    /// register a new account to be used
    ///
    /// - Remark: HTTP `POST /todo/user/create`.
    /// - Remark: Generated from `#/paths//todo/user/create/post(create_user)`.
    public func createUser(
        headers: Operations.CreateUser.Input.Headers = .init(),
        body: Operations.CreateUser.Input.Body
    ) async throws -> Operations.CreateUser.Output {
        try await createUser(Operations.CreateUser.Input(
            headers: headers,
            body: body
        ))
    }
    /// This documentation page.
    ///
    /// - Remark: HTTP `GET /docs/`.
    /// - Remark: Generated from `#/paths//docs//get`.
    public func getDocs(headers: Operations.GetDocs.Input.Headers = .init()) async throws -> Operations.GetDocs.Output {
        try await getDocs(Operations.GetDocs.Input(headers: headers))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/Account`.
        public struct Account: Codable, Hashable, Sendable {
            /// email address
            ///
            /// - Remark: Generated from `#/components/schemas/Account/email`.
            public var email: Swift.String?
            /// internal uuid for the user
            ///
            /// - Remark: Generated from `#/components/schemas/Account/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Account/phoneNumber`.
            public var phoneNumber: Components.Schemas.PhoneNumber?
            /// phone number
            ///
            /// - Remark: Generated from `#/components/schemas/Account/phoneNumber2`.
            @frozen public enum PhoneNumber2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Account/phoneNumber2/case1`.
                case PhoneNumber(Components.Schemas.PhoneNumber)
                /// - Remark: Generated from `#/components/schemas/Account/phoneNumber2/case2`.
                case PhoneNumber2(Components.Schemas.PhoneNumber2)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .PhoneNumber(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .PhoneNumber2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .PhoneNumber(value):
                        try value.encode(to: encoder)
                    case let .PhoneNumber2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// phone number
            ///
            /// - Remark: Generated from `#/components/schemas/Account/phoneNumber2`.
            public var phoneNumber2: Components.Schemas.Account.PhoneNumber2Payload?
            /// - Remark: Generated from `#/components/schemas/Account/phoneNumber3`.
            public var phoneNumber3: Components.Schemas.PhoneNumber?
            /// The code (string) for referrals
            ///
            /// - Remark: Generated from `#/components/schemas/Account/role`.
            public var role: Components.Schemas.Role
            /// username as A-Za-z0-9
            ///
            /// - Remark: Generated from `#/components/schemas/Account/username`.
            public var username: Swift.String
            /// Creates a new `Account`.
            ///
            /// - Parameters:
            ///   - email: email address
            ///   - id: internal uuid for the user
            ///   - phoneNumber:
            ///   - phoneNumber2: phone number
            ///   - phoneNumber3:
            ///   - role: The code (string) for referrals
            ///   - username: username as A-Za-z0-9
            public init(
                email: Swift.String? = nil,
                id: Swift.String,
                phoneNumber: Components.Schemas.PhoneNumber? = nil,
                phoneNumber2: Components.Schemas.Account.PhoneNumber2Payload? = nil,
                phoneNumber3: Components.Schemas.PhoneNumber? = nil,
                role: Components.Schemas.Role,
                username: Swift.String
            ) {
                self.email = email
                self.id = id
                self.phoneNumber = phoneNumber
                self.phoneNumber2 = phoneNumber2
                self.phoneNumber3 = phoneNumber3
                self.role = role
                self.username = username
            }
            public enum CodingKeys: String, CodingKey {
                case email
                case id
                case phoneNumber
                case phoneNumber2
                case phoneNumber3
                case role
                case username
            }
        }
        /// A default error response for most API errors.
        ///
        /// - Remark: Generated from `#/components/schemas/AppError`.
        public struct AppError: Codable, Hashable, Sendable {
            /// An error message.
            ///
            /// - Remark: Generated from `#/components/schemas/AppError/error`.
            public var error: Swift.String
            /// Optional Additional error details.
            ///
            /// - Remark: Generated from `#/components/schemas/AppError/error_details`.
            public var errorDetails: OpenAPIRuntime.OpenAPIValueContainer?
            /// A unique error ID.
            ///
            /// - Remark: Generated from `#/components/schemas/AppError/error_id`.
            public var errorId: Swift.String
            /// Creates a new `AppError`.
            ///
            /// - Parameters:
            ///   - error: An error message.
            ///   - errorDetails: Optional Additional error details.
            ///   - errorId: A unique error ID.
            public init(
                error: Swift.String,
                errorDetails: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                errorId: Swift.String
            ) {
                self.error = error
                self.errorDetails = errorDetails
                self.errorId = errorId
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case errorDetails = "error_details"
                case errorId = "error_id"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorPayload`.
        public struct ErrorPayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorPayload/message`.
            public var message: Swift.String
            /// Creates a new `ErrorPayload`.
            ///
            /// - Parameters:
            ///   - message:
            public init(message: Swift.String) {
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/NewAccount`.
        public struct NewAccount: Codable, Hashable, Sendable {
            /// email address
            ///
            /// - Remark: Generated from `#/components/schemas/NewAccount/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NewAccount/phoneNumber`.
            public var phoneNumber: Components.Schemas.PhoneNumber?
            /// The code (string) for referrals
            ///
            /// - Remark: Generated from `#/components/schemas/NewAccount/role`.
            public var role: Components.Schemas.Role
            /// username as A-Za-z0-9
            ///
            /// - Remark: Generated from `#/components/schemas/NewAccount/username`.
            public var username: Swift.String
            /// Creates a new `NewAccount`.
            ///
            /// - Parameters:
            ///   - email: email address
            ///   - phoneNumber:
            ///   - role: The code (string) for referrals
            ///   - username: username as A-Za-z0-9
            public init(
                email: Swift.String? = nil,
                phoneNumber: Components.Schemas.PhoneNumber? = nil,
                role: Components.Schemas.Role,
                username: Swift.String
            ) {
                self.email = email
                self.phoneNumber = phoneNumber
                self.role = role
                self.username = username
            }
            public enum CodingKeys: String, CodingKey {
                case email
                case phoneNumber
                case role
                case username
            }
        }
        /// New Todo details.
        ///
        /// - Remark: Generated from `#/components/schemas/NewTodo`.
        public struct NewTodo: Codable, Hashable, Sendable {
            /// The description for the new Todo.
            ///
            /// - Remark: Generated from `#/components/schemas/NewTodo/description`.
            public var description: Swift.String
            /// Creates a new `NewTodo`.
            ///
            /// - Parameters:
            ///   - description: The description for the new Todo.
            public init(description: Swift.String) {
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case description
            }
        }
        /// - Remark: Generated from `#/components/schemas/PhoneNumber`.
        public struct PhoneNumber: Codable, Hashable, Sendable {
            /// country code must contain only a set of digits 0-9
            ///
            /// - Remark: Generated from `#/components/schemas/PhoneNumber/countryCode`.
            public var countryCode: Swift.String
            /// the number should be a set of digits "333555222".
            ///
            /// - Remark: Generated from `#/components/schemas/PhoneNumber/number`.
            public var number: Swift.String
            /// Creates a new `PhoneNumber`.
            ///
            /// - Parameters:
            ///   - countryCode: country code must contain only a set of digits 0-9
            ///   - number: the number should be a set of digits "333555222".
            public init(
                countryCode: Swift.String,
                number: Swift.String
            ) {
                self.countryCode = countryCode
                self.number = number
            }
            public enum CodingKeys: String, CodingKey {
                case countryCode
                case number
            }
        }
        /// - Remark: Generated from `#/components/schemas/PhoneNumber2`.
        public struct PhoneNumber2: Codable, Hashable, Sendable {
            /// country code must contain only a set of digits 0-9
            ///
            /// - Remark: Generated from `#/components/schemas/PhoneNumber2/countryCode`.
            public var countryCode: Swift.String
            /// the number should be a set of digits "333555222".
            ///
            /// - Remark: Generated from `#/components/schemas/PhoneNumber2/number`.
            public var number: Swift.String
            /// Creates a new `PhoneNumber2`.
            ///
            /// - Parameters:
            ///   - countryCode: country code must contain only a set of digits 0-9
            ///   - number: the number should be a set of digits "333555222".
            public init(
                countryCode: Swift.String,
                number: Swift.String
            ) {
                self.countryCode = countryCode
                self.number = number
            }
            public enum CodingKeys: String, CodingKey {
                case countryCode
                case number
            }
        }
        /// - Remark: Generated from `#/components/schemas/Role`.
        @frozen public enum Role: String, Codable, Hashable, Sendable, CaseIterable {
            case user = "user"
            case admin = "admin"
        }
        /// - Remark: Generated from `#/components/schemas/SelectTodo`.
        public struct SelectTodo: Codable, Hashable, Sendable {
            /// The ID of the Todo.
            ///
            /// - Remark: Generated from `#/components/schemas/SelectTodo/id`.
            public var id: Swift.String
            /// Creates a new `SelectTodo`.
            ///
            /// - Parameters:
            ///   - id: The ID of the Todo.
            public init(id: Swift.String) {
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case id
            }
        }
        /// New Todo details.
        ///
        /// - Remark: Generated from `#/components/schemas/TodoCreated`.
        public struct TodoCreated: Codable, Hashable, Sendable {
            /// The ID of the new Todo.
            ///
            /// - Remark: Generated from `#/components/schemas/TodoCreated/id`.
            public var id: Swift.String
            /// Creates a new `TodoCreated`.
            ///
            /// - Parameters:
            ///   - id: The ID of the new Todo.
            public init(id: Swift.String) {
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case id
            }
        }
        /// A single Todo item.
        ///
        /// - Remark: Generated from `#/components/schemas/TodoItem`.
        public struct TodoItem: Codable, Hashable, Sendable {
            /// Whether the item was completed.
            ///
            /// - Remark: Generated from `#/components/schemas/TodoItem/complete`.
            public var complete: Swift.Bool
            /// The description of the item.
            ///
            /// - Remark: Generated from `#/components/schemas/TodoItem/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/TodoItem/id`.
            public var id: Swift.String
            /// Creates a new `TodoItem`.
            ///
            /// - Parameters:
            ///   - complete: Whether the item was completed.
            ///   - description: The description of the item.
            ///   - id:
            public init(
                complete: Swift.Bool,
                description: Swift.String,
                id: Swift.String
            ) {
                self.complete = complete
                self.description = description
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case complete
                case description
                case id
            }
        }
        /// - Remark: Generated from `#/components/schemas/TodoList`.
        public struct TodoList: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TodoList/todo_ids`.
            public var todoIds: [Swift.String]
            /// Creates a new `TodoList`.
            ///
            /// - Parameters:
            ///   - todoIds:
            public init(todoIds: [Swift.String]) {
                self.todoIds = todoIds
            }
            public enum CodingKeys: String, CodingKey {
                case todoIds = "todo_ids"
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List all Todo items.
    ///
    /// - Remark: HTTP `GET /todo/`.
    /// - Remark: Generated from `#/paths//todo//get`.
    public enum GetTodo {
        public static let id: Swift.String = "get/todo/"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/todo/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTodo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTodo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetTodo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.GetTodo.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/todo/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TodoList)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TodoList {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetTodo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetTodo.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//todo//get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetTodo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetTodo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/GET/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/todo/GET/responses/default/content/application\/json`.
                    case json(Components.Schemas.AppError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetTodo.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetTodo.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//todo//get/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.GetTodo.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.GetTodo.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a new incomplete Todo item.
    ///
    /// - Remark: HTTP `POST /todo/`.
    /// - Remark: Generated from `#/paths//todo//post`.
    public enum PostTodo {
        public static let id: Swift.String = "post/todo/"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/todo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostTodo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostTodo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostTodo.Input.Headers
            /// - Remark: Generated from `#/paths/todo/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.NewTodo)
            }
            public var body: Operations.PostTodo.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostTodo.Input.Headers = .init(),
                body: Operations.PostTodo.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/todo/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.TodoCreated)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TodoCreated {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostTodo.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostTodo.Output.Created.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//todo//post/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.PostTodo.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.PostTodo.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/POST/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/todo/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.AppError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostTodo.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostTodo.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// conflict with username, email, phone, or similar unique required data
            ///
            /// - Remark: Generated from `#/paths//todo//post/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.PostTodo.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.PostTodo.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/todo/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas.AppError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostTodo.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostTodo.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//todo//post/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PostTodo.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PostTodo.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a single Todo item.
    ///
    /// - Remark: HTTP `GET /todo/{id}`.
    /// - Remark: Generated from `#/paths//todo/{id}/get`.
    public enum GetTodoId {
        public static let id: Swift.String = "get/todo/{id}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/todo/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the Todo.
                ///
                /// - Remark: Generated from `#/paths/todo/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The ID of the Todo.
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.GetTodoId.Input.Path
            /// - Remark: Generated from `#/paths/todo/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTodoId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTodoId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetTodoId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetTodoId.Input.Path,
                headers: Operations.GetTodoId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/todo/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TodoItem)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TodoItem {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetTodoId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetTodoId.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//todo/{id}/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetTodoId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetTodoId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// todo was not found
            ///
            /// - Remark: Generated from `#/paths//todo/{id}/get/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetTodoId.Output.NotFound)
            /// todo was not found
            ///
            /// - Remark: Generated from `#/paths//todo/{id}/get/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            public static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.GetTodoId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/{id}/GET/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/todo/{id}/GET/responses/default/content/application\/json`.
                    case json(Components.Schemas.AppError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetTodoId.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetTodoId.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//todo/{id}/get/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.GetTodoId.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.GetTodoId.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a Todo item.
    ///
    /// - Remark: HTTP `DELETE /todo/{id}`.
    /// - Remark: Generated from `#/paths//todo/{id}/delete`.
    public enum DeleteTodoId {
        public static let id: Swift.String = "delete/todo/{id}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/todo/{id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the Todo.
                ///
                /// - Remark: Generated from `#/paths/todo/{id}/DELETE/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The ID of the Todo.
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.DeleteTodoId.Input.Path
            /// - Remark: Generated from `#/paths/todo/{id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteTodoId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteTodoId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteTodoId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteTodoId.Input.Path,
                headers: Operations.DeleteTodoId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// The Todo has been deleted.
            ///
            /// - Remark: Generated from `#/paths//todo/{id}/delete/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.DeleteTodoId.Output.NoContent)
            /// The Todo has been deleted.
            ///
            /// - Remark: Generated from `#/paths//todo/{id}/delete/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.DeleteTodoId.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// The todo was not found
            ///
            /// - Remark: Generated from `#/paths//todo/{id}/delete/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.DeleteTodoId.Output.NotFound)
            /// The todo was not found
            ///
            /// - Remark: Generated from `#/paths//todo/{id}/delete/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            public static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.DeleteTodoId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/{id}/DELETE/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/todo/{id}/DELETE/responses/default/content/application\/json`.
                    case json(Components.Schemas.AppError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteTodoId.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteTodoId.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//todo/{id}/delete/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.DeleteTodoId.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.DeleteTodoId.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Complete a Todo.
    ///
    /// - Remark: HTTP `PUT /todo/{id}/complete`.
    /// - Remark: Generated from `#/paths//todo/{id}/complete/put`.
    public enum PutTodoIdComplete {
        public static let id: Swift.String = "put/todo/{id}/complete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/todo/{id}/complete/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the Todo.
                ///
                /// - Remark: Generated from `#/paths/todo/{id}/complete/PUT/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The ID of the Todo.
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.PutTodoIdComplete.Input.Path
            /// - Remark: Generated from `#/paths/todo/{id}/complete/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutTodoIdComplete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutTodoIdComplete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PutTodoIdComplete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.PutTodoIdComplete.Input.Path,
                headers: Operations.PutTodoIdComplete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// no content
            ///
            /// - Remark: Generated from `#/paths//todo/{id}/complete/put/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.PutTodoIdComplete.Output.NoContent)
            /// no content
            ///
            /// - Remark: Generated from `#/paths//todo/{id}/complete/put/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.PutTodoIdComplete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/{id}/complete/PUT/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/todo/{id}/complete/PUT/responses/default/content/application\/json`.
                    case json(Components.Schemas.AppError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PutTodoIdComplete.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PutTodoIdComplete.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//todo/{id}/complete/put/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.PutTodoIdComplete.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.PutTodoIdComplete.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// creates an account
    ///
    /// register a new account to be used
    ///
    /// - Remark: HTTP `POST /todo/user/create`.
    /// - Remark: Generated from `#/paths//todo/user/create/post(create_user)`.
    public enum CreateUser {
        public static let id: Swift.String = "create_user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/todo/user/create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.CreateUser.Input.Headers
            /// - Remark: Generated from `#/paths/todo/user/create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/user/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.NewAccount)
            }
            public var body: Operations.CreateUser.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.CreateUser.Input.Headers = .init(),
                body: Operations.CreateUser.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/user/create/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/todo/user/create/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.Account)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Account {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateUser.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateUser.Output.Created.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//todo/user/create/post(create_user)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.CreateUser.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.CreateUser.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/user/create/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/todo/user/create/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateUser.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateUser.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// bad request
            ///
            /// - Remark: Generated from `#/paths//todo/user/create/post(create_user)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.CreateUser.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.CreateUser.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/user/create/POST/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/todo/user/create/POST/responses/409/content/application\/json`.
                    case json(Components.Schemas.ErrorPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateUser.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateUser.Output.Conflict.Body) {
                    self.body = body
                }
            }
            /// conflict with username, email, phone, or similar unique required data
            ///
            /// - Remark: Generated from `#/paths//todo/user/create/post(create_user)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.CreateUser.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.CreateUser.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/user/create/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/todo/user/create/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateUser.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateUser.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// parse error or missing data
            ///
            /// - Remark: Generated from `#/paths//todo/user/create/post(create_user)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.CreateUser.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.CreateUser.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/todo/user/create/POST/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/todo/user/create/POST/responses/default/content/application\/json`.
                    case json(Components.Schemas.AppError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.CreateUser.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.CreateUser.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//todo/user/create/post(create_user)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.CreateUser.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.CreateUser.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// This documentation page.
    ///
    /// - Remark: HTTP `GET /docs/`.
    /// - Remark: Generated from `#/paths//docs//get`.
    public enum GetDocs {
        public static let id: Swift.String = "get/docs/"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/docs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetDocs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetDocs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetDocs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.GetDocs.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/docs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/docs/GET/responses/200/content/text\/html`.
                    case html(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.html`.
                    ///
                    /// - Throws: An error if `self` is not `.html`.
                    /// - SeeAlso: `.html`.
                    public var html: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .html(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetDocs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetDocs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// HTML content
            ///
            /// - Remark: Generated from `#/paths//docs//get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetDocs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetDocs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/docs/GET/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/docs/GET/responses/default/content/application\/json`.
                    case json(Components.Schemas.AppError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetDocs.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetDocs.Output.Default.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//docs//get/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.GetDocs.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.GetDocs.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case html
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/html":
                    self = .html
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .html:
                    return "text/html"
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .html,
                    .json
                ]
            }
        }
    }
}
