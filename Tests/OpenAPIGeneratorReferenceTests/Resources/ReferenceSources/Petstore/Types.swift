// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List all pets
    ///
    /// You can fetch
    /// all the pets here
    ///
    /// - Remark: HTTP `GET /pets`.
    /// - Remark: Generated from `#/paths//pets/get(listPets)`.
    func listPets(_ input: Operations.listPets.Input) async throws -> Operations.listPets.Output
    /// Create a pet
    ///
    /// - Remark: HTTP `POST /pets`.
    /// - Remark: Generated from `#/paths//pets/post(createPet)`.
    func createPet(_ input: Operations.createPet.Input) async throws -> Operations.createPet.Output
    /// Create a pet using a url form
    ///
    /// - Remark: HTTP `POST /pets/create`.
    /// - Remark: Generated from `#/paths//pets/create/post(createPetWithForm)`.
    func createPetWithForm(_ input: Operations.createPetWithForm.Input) async throws -> Operations.createPetWithForm.Output
    /// - Remark: HTTP `GET /pets/stats`.
    /// - Remark: Generated from `#/paths//pets/stats/get(getStats)`.
    func getStats(_ input: Operations.getStats.Input) async throws -> Operations.getStats.Output
    /// - Remark: HTTP `POST /pets/stats`.
    /// - Remark: Generated from `#/paths//pets/stats/post(postStats)`.
    func postStats(_ input: Operations.postStats.Input) async throws -> Operations.postStats.Output
    /// - Remark: HTTP `POST /probe/`.
    /// - Remark: Generated from `#/paths//probe//post(probe)`.
    func probe(_ input: Operations.probe.Input) async throws -> Operations.probe.Output
    /// Update just a specific property of an existing pet. Nothing is updated if no request body is provided.
    ///
    /// - Remark: HTTP `PATCH /pets/{petId}`.
    /// - Remark: Generated from `#/paths//pets/{petId}/patch(updatePet)`.
    func updatePet(_ input: Operations.updatePet.Input) async throws -> Operations.updatePet.Output
    /// Upload an avatar
    ///
    /// - Remark: HTTP `PUT /pets/{petId}/avatar`.
    /// - Remark: Generated from `#/paths//pets/{petId}/avatar/put(uploadAvatarForPet)`.
    func uploadAvatarForPet(_ input: Operations.uploadAvatarForPet.Input) async throws -> Operations.uploadAvatarForPet.Output
    /// - Remark: HTTP `GET /pets/multipart-typed`.
    /// - Remark: Generated from `#/paths//pets/multipart-typed/get(multipartDownloadTyped)`.
    func multipartDownloadTyped(_ input: Operations.multipartDownloadTyped.Input) async throws -> Operations.multipartDownloadTyped.Output
    /// - Remark: HTTP `POST /pets/multipart-typed`.
    /// - Remark: Generated from `#/paths//pets/multipart-typed/post(multipartUploadTyped)`.
    func multipartUploadTyped(_ input: Operations.multipartUploadTyped.Input) async throws -> Operations.multipartUploadTyped.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List all pets
    ///
    /// You can fetch
    /// all the pets here
    ///
    /// - Remark: HTTP `GET /pets`.
    /// - Remark: Generated from `#/paths//pets/get(listPets)`.
    public func listPets(
        query: Operations.listPets.Input.Query = .init(),
        headers: Operations.listPets.Input.Headers = .init()
    ) async throws -> Operations.listPets.Output {
        try await listPets(Operations.listPets.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a pet
    ///
    /// - Remark: HTTP `POST /pets`.
    /// - Remark: Generated from `#/paths//pets/post(createPet)`.
    public func createPet(
        headers: Operations.createPet.Input.Headers = .init(),
        body: Operations.createPet.Input.Body
    ) async throws -> Operations.createPet.Output {
        try await createPet(Operations.createPet.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create a pet using a url form
    ///
    /// - Remark: HTTP `POST /pets/create`.
    /// - Remark: Generated from `#/paths//pets/create/post(createPetWithForm)`.
    public func createPetWithForm(body: Operations.createPetWithForm.Input.Body) async throws -> Operations.createPetWithForm.Output {
        try await createPetWithForm(Operations.createPetWithForm.Input(body: body))
    }
    /// - Remark: HTTP `GET /pets/stats`.
    /// - Remark: Generated from `#/paths//pets/stats/get(getStats)`.
    public func getStats(headers: Operations.getStats.Input.Headers = .init()) async throws -> Operations.getStats.Output {
        try await getStats(Operations.getStats.Input(headers: headers))
    }
    /// - Remark: HTTP `POST /pets/stats`.
    /// - Remark: Generated from `#/paths//pets/stats/post(postStats)`.
    public func postStats(body: Operations.postStats.Input.Body) async throws -> Operations.postStats.Output {
        try await postStats(Operations.postStats.Input(body: body))
    }
    /// - Remark: HTTP `POST /probe/`.
    /// - Remark: Generated from `#/paths//probe//post(probe)`.
    public func probe() async throws -> Operations.probe.Output {
        try await probe(Operations.probe.Input())
    }
    /// Update just a specific property of an existing pet. Nothing is updated if no request body is provided.
    ///
    /// - Remark: HTTP `PATCH /pets/{petId}`.
    /// - Remark: Generated from `#/paths//pets/{petId}/patch(updatePet)`.
    public func updatePet(
        path: Operations.updatePet.Input.Path,
        headers: Operations.updatePet.Input.Headers = .init(),
        body: Components.RequestBodies.UpdatePetRequest? = nil
    ) async throws -> Operations.updatePet.Output {
        try await updatePet(Operations.updatePet.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Upload an avatar
    ///
    /// - Remark: HTTP `PUT /pets/{petId}/avatar`.
    /// - Remark: Generated from `#/paths//pets/{petId}/avatar/put(uploadAvatarForPet)`.
    public func uploadAvatarForPet(
        path: Operations.uploadAvatarForPet.Input.Path,
        headers: Operations.uploadAvatarForPet.Input.Headers = .init(),
        body: Operations.uploadAvatarForPet.Input.Body
    ) async throws -> Operations.uploadAvatarForPet.Output {
        try await uploadAvatarForPet(Operations.uploadAvatarForPet.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /pets/multipart-typed`.
    /// - Remark: Generated from `#/paths//pets/multipart-typed/get(multipartDownloadTyped)`.
    public func multipartDownloadTyped(headers: Operations.multipartDownloadTyped.Input.Headers = .init()) async throws -> Operations.multipartDownloadTyped.Output {
        try await multipartDownloadTyped(Operations.multipartDownloadTyped.Input(headers: headers))
    }
    /// - Remark: HTTP `POST /pets/multipart-typed`.
    /// - Remark: Generated from `#/paths//pets/multipart-typed/post(multipartUploadTyped)`.
    public func multipartUploadTyped(body: Components.RequestBodies.MultipartUploadTypedRequest) async throws -> Operations.multipartUploadTyped.Output {
        try await multipartUploadTyped(Operations.multipartUploadTyped.Input(body: body))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// Example Petstore implementation service
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://example.com/api",
            variables: []
        )
    }
    public static func server2() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "/api",
            variables: []
        )
    }
    /// A custom domain.
    ///
    /// - Parameters:
    ///   - _protocol:
    ///   - subdomain: A subdomain name.
    ///   - port:
    ///   - basePath: The base API path.
    public static func server3(
        _protocol: Swift.String = "https",
        subdomain: Swift.String = "test",
        port: Swift.String = "443",
        basePath: Swift.String = "v1"
    ) throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "{protocol}://{subdomain}.example.com:{port}/{basePath}",
            variables: [
                .init(
                    name: "protocol",
                    value: _protocol
                ),
                .init(
                    name: "subdomain",
                    value: subdomain
                ),
                .init(
                    name: "port",
                    value: port,
                    allowedValues: [
                        "443",
                        "8443"
                    ]
                ),
                .init(
                    name: "basePath",
                    value: basePath
                )
            ]
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Pet metadata
        ///
        /// - Remark: Generated from `#/components/schemas/Pet`.
        public struct Pet: Codable, Hashable, Sendable {
            /// Pet id
            ///
            /// - Remark: Generated from `#/components/schemas/Pet/id`.
            public var id: Swift.Int64
            /// Pet name
            ///
            /// - Remark: Generated from `#/components/schemas/Pet/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Pet/tag`.
            public var tag: Swift.String?
            /// Pet genome (base64-encoded)
            ///
            /// - Remark: Generated from `#/components/schemas/Pet/genome`.
            public var genome: OpenAPIRuntime.Base64EncodedData?
            /// - Remark: Generated from `#/components/schemas/Pet/kind`.
            public var kind: Components.Schemas.PetKind?
            /// Creates a new `Pet`.
            ///
            /// - Parameters:
            ///   - id: Pet id
            ///   - name: Pet name
            ///   - tag:
            ///   - genome: Pet genome (base64-encoded)
            ///   - kind:
            public init(
                id: Swift.Int64,
                name: Swift.String,
                tag: Swift.String? = nil,
                genome: OpenAPIRuntime.Base64EncodedData? = nil,
                kind: Components.Schemas.PetKind? = nil
            ) {
                self.id = id
                self.name = name
                self.tag = tag
                self.genome = genome
                self.kind = kind
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case tag
                case genome
                case kind
            }
        }
        /// - Remark: Generated from `#/components/schemas/MixedAnyOf`.
        public struct MixedAnyOf: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MixedAnyOf/value1`.
            public var value1: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/MixedAnyOf/value2`.
            public var value2: Components.Schemas.PetKind?
            /// - Remark: Generated from `#/components/schemas/MixedAnyOf/value3`.
            public var value3: Components.Schemas.Pet?
            /// - Remark: Generated from `#/components/schemas/MixedAnyOf/value4`.
            public var value4: Swift.String?
            /// Creates a new `MixedAnyOf`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            public init(
                value1: Foundation.Date? = nil,
                value2: Components.Schemas.PetKind? = nil,
                value3: Components.Schemas.Pet? = nil,
                value4: Swift.String? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    value1 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    value2 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value4 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        value1,
                        value2,
                        value3,
                        value4
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                    value1,
                    value2,
                    value4
                ])
                try value3?.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/MixedOneOf`.
        @frozen public enum MixedOneOf: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MixedOneOf/case1`.
            case case1(Foundation.Date)
            /// - Remark: Generated from `#/components/schemas/MixedOneOf/case2`.
            case PetKind(Components.Schemas.PetKind)
            /// - Remark: Generated from `#/components/schemas/MixedOneOf/case3`.
            case Pet(Components.Schemas.Pet)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .PetKind(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .Pet(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .PetKind(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .Pet(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/MixedAllOfPrimitive`.
        public struct MixedAllOfPrimitive: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MixedAllOfPrimitive/value1`.
            public var value1: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/MixedAllOfPrimitive/value2`.
            public var value2: Swift.String
            /// Creates a new `MixedAllOfPrimitive`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Foundation.Date,
                value2: Swift.String
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try decoder.decodeFromSingleValueContainer()
                value2 = try decoder.decodeFromSingleValueContainer()
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeToSingleValueContainer(value1)
            }
        }
        /// Kind of pet
        ///
        /// - Remark: Generated from `#/components/schemas/PetKind`.
        @frozen public enum PetKind: String, Codable, Hashable, Sendable {
            case cat = "cat"
            case dog = "dog"
            case ELEPHANT = "ELEPHANT"
            case BIG_ELEPHANT_1 = "BIG_ELEPHANT_1"
            case _dollar_nake = "$nake"
            case _public = "public"
        }
        /// - Remark: Generated from `#/components/schemas/CreatePetRequest`.
        public struct CreatePetRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreatePetRequest/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreatePetRequest/kind`.
            public var kind: Components.Schemas.PetKind?
            /// - Remark: Generated from `#/components/schemas/CreatePetRequest/tag`.
            public var tag: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreatePetRequest/genome`.
            public var genome: OpenAPIRuntime.Base64EncodedData?
            /// Creates a new `CreatePetRequest`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - kind:
            ///   - tag:
            ///   - genome:
            public init(
                name: Swift.String,
                kind: Components.Schemas.PetKind? = nil,
                tag: Swift.String? = nil,
                genome: OpenAPIRuntime.Base64EncodedData? = nil
            ) {
                self.name = name
                self.kind = kind
                self.tag = tag
                self.genome = genome
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case kind
                case tag
                case genome
            }
        }
        /// - Remark: Generated from `#/components/schemas/Pets`.
        public typealias Pets = [Components.Schemas.Pet]
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Error/code`.
            public var code: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/Error/me$sage`.
            public var me_dollar_sage: Swift.String
            /// Extra information about the error.
            ///
            /// - Remark: Generated from `#/components/schemas/Error/extraInfo`.
            public var extraInfo: Components.Schemas.ExtraInfo?
            /// Custom user-provided key-value pairs.
            ///
            /// - Remark: Generated from `#/components/schemas/Error/userData`.
            public var userData: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - code:
            ///   - me_dollar_sage:
            ///   - extraInfo: Extra information about the error.
            ///   - userData: Custom user-provided key-value pairs.
            public init(
                code: Swift.Int32,
                me_dollar_sage: Swift.String,
                extraInfo: Components.Schemas.ExtraInfo? = nil,
                userData: OpenAPIRuntime.OpenAPIObjectContainer? = nil
            ) {
                self.code = code
                self.me_dollar_sage = me_dollar_sage
                self.extraInfo = extraInfo
                self.userData = userData
            }
            public enum CodingKeys: String, CodingKey {
                case code
                case me_dollar_sage = "me$sage"
                case extraInfo
                case userData
            }
        }
        /// - Remark: Generated from `#/components/schemas/PetFeeding`.
        public struct PetFeeding: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PetFeeding/schedule`.
            @frozen public enum schedulePayload: String, Codable, Hashable, Sendable {
                case hourly = "hourly"
                case daily = "daily"
                case weekly = "weekly"
            }
            /// - Remark: Generated from `#/components/schemas/PetFeeding/schedule`.
            public var schedule: Components.Schemas.PetFeeding.schedulePayload?
            /// Creates a new `PetFeeding`.
            ///
            /// - Parameters:
            ///   - schedule:
            public init(schedule: Components.Schemas.PetFeeding.schedulePayload? = nil) {
                self.schedule = schedule
            }
            public enum CodingKeys: String, CodingKey {
                case schedule
            }
        }
        /// - Remark: Generated from `#/components/schemas/DOB`.
        public typealias DOB = Foundation.Date
        /// - Remark: Generated from `#/components/schemas/ExtraInfo`.
        public typealias ExtraInfo = Swift.String
        /// - Remark: Generated from `#/components/schemas/NoAdditionalProperties`.
        public struct NoAdditionalProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NoAdditionalProperties/foo`.
            public var foo: Swift.String?
            /// Creates a new `NoAdditionalProperties`.
            ///
            /// - Parameters:
            ///   - foo:
            public init(foo: Swift.String? = nil) {
                self.foo = foo
            }
            public enum CodingKeys: String, CodingKey {
                case foo
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                foo = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .foo
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "foo"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/AnyAdditionalProperties`.
        public struct AnyAdditionalProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AnyAdditionalProperties/foo`.
            public var foo: Swift.String?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `AnyAdditionalProperties`.
            ///
            /// - Parameters:
            ///   - foo:
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                foo: Swift.String? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.foo = foo
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case foo
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                foo = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .foo
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "foo"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    foo,
                    forKey: .foo
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/TypedAdditionalProperties`.
        public struct TypedAdditionalProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TypedAdditionalProperties/foo`.
            public var foo: Swift.String?
            /// A container of undocumented properties.
            public var additionalProperties: [String: Swift.Int]
            /// Creates a new `TypedAdditionalProperties`.
            ///
            /// - Parameters:
            ///   - foo:
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                foo: Swift.String? = nil,
                additionalProperties: [String: Swift.Int] = .init()
            ) {
                self.foo = foo
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey {
                case foo
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                foo = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .foo
                )
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                    "foo"
                ])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(
                    foo,
                    forKey: .foo
                )
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ObjectWithOptionalNullableArrayOfNullableItems`.
        public struct ObjectWithOptionalNullableArrayOfNullableItems: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ObjectWithOptionalNullableArrayOfNullableItems/foo`.
            public var foo: [Swift.String?]?
            /// Creates a new `ObjectWithOptionalNullableArrayOfNullableItems`.
            ///
            /// - Parameters:
            ///   - foo:
            public init(foo: [Swift.String?]? = nil) {
                self.foo = foo
            }
            public enum CodingKeys: String, CodingKey {
                case foo
            }
        }
        /// - Remark: Generated from `#/components/schemas/CodeError`.
        public struct CodeError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CodeError/code`.
            public var code: Swift.Int
            /// Creates a new `CodeError`.
            ///
            /// - Parameters:
            ///   - code:
            public init(code: Swift.Int) {
                self.code = code
            }
            public enum CodingKeys: String, CodingKey {
                case code
            }
        }
        /// - Remark: Generated from `#/components/schemas/AllOfObjects`.
        public struct AllOfObjects: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AllOfObjects/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AllOfObjects/value1/message`.
                public var message: Swift.String
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - message:
                public init(message: Swift.String) {
                    self.message = message
                }
                public enum CodingKeys: String, CodingKey {
                    case message
                }
            }
            /// - Remark: Generated from `#/components/schemas/AllOfObjects/value1`.
            public var value1: Components.Schemas.AllOfObjects.Value1Payload
            /// - Remark: Generated from `#/components/schemas/AllOfObjects/value2`.
            public var value2: Components.Schemas.CodeError
            /// Creates a new `AllOfObjects`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.AllOfObjects.Value1Payload,
                value2: Components.Schemas.CodeError
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/AnyOfObjects`.
        public struct AnyOfObjects: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AnyOfObjects/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AnyOfObjects/value1/message`.
                public var message: Swift.String
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - message:
                public init(message: Swift.String) {
                    self.message = message
                }
                public enum CodingKeys: String, CodingKey {
                    case message
                }
            }
            /// - Remark: Generated from `#/components/schemas/AnyOfObjects/value1`.
            public var value1: Components.Schemas.AnyOfObjects.Value1Payload?
            /// - Remark: Generated from `#/components/schemas/AnyOfObjects/value2`.
            public var value2: Components.Schemas.CodeError?
            /// Creates a new `AnyOfObjects`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.AnyOfObjects.Value1Payload? = nil,
                value2: Components.Schemas.CodeError? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        value1,
                        value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try value1?.encode(to: encoder)
                try value2?.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/OneOfAny`.
        @frozen public enum OneOfAny: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OneOfAny/case1`.
            case case1(Swift.String)
            /// - Remark: Generated from `#/components/schemas/OneOfAny/case2`.
            case case2(Swift.Int)
            /// - Remark: Generated from `#/components/schemas/OneOfAny/case3`.
            case CodeError(Components.Schemas.CodeError)
            /// - Remark: Generated from `#/components/schemas/OneOfAny/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/OneOfAny/case4/message`.
                public var message: Swift.String
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - message:
                public init(message: Swift.String) {
                    self.message = message
                }
                public enum CodingKeys: String, CodingKey {
                    case message
                }
            }
            /// - Remark: Generated from `#/components/schemas/OneOfAny/case4`.
            case case4(Components.Schemas.OneOfAny.Case4Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .CodeError(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .CodeError(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/PetExercise`.
        public struct PetExercise: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PetExercise/kind`.
            public var kind: Swift.String
            /// Creates a new `PetExercise`.
            ///
            /// - Parameters:
            ///   - kind:
            public init(kind: Swift.String) {
                self.kind = kind
            }
            public enum CodingKeys: String, CodingKey {
                case kind
            }
        }
        /// - Remark: Generated from `#/components/schemas/Walk`.
        public struct Walk: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Walk/kind`.
            public var kind: Swift.String
            /// - Remark: Generated from `#/components/schemas/Walk/length`.
            public var length: Swift.Int
            /// Creates a new `Walk`.
            ///
            /// - Parameters:
            ///   - kind:
            ///   - length:
            public init(
                kind: Swift.String,
                length: Swift.Int
            ) {
                self.kind = kind
                self.length = length
            }
            public enum CodingKeys: String, CodingKey {
                case kind
                case length
            }
        }
        /// - Remark: Generated from `#/components/schemas/MessagedExercise`.
        public struct MessagedExercise: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MessagedExercise/value1`.
            public var value1: Components.Schemas.PetExercise
            /// - Remark: Generated from `#/components/schemas/MessagedExercise/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/MessagedExercise/value2/message`.
                public var message: Swift.String
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - message:
                public init(message: Swift.String) {
                    self.message = message
                }
                public enum CodingKeys: String, CodingKey {
                    case message
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessagedExercise/value2`.
            public var value2: Components.Schemas.MessagedExercise.Value2Payload
            /// Creates a new `MessagedExercise`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PetExercise,
                value2: Components.Schemas.MessagedExercise.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/OneOfObjectsWithDiscriminator`.
        @frozen public enum OneOfObjectsWithDiscriminator: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OneOfObjectsWithDiscriminator/Walk`.
            case Walk(Components.Schemas.Walk)
            /// - Remark: Generated from `#/components/schemas/OneOfObjectsWithDiscriminator/MessagedExercise`.
            case MessagedExercise(Components.Schemas.MessagedExercise)
            public enum CodingKeys: String, CodingKey {
                case kind
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                let discriminator = try container.decode(
                    Swift.String.self,
                    forKey: .kind
                )
                switch discriminator {
                case "Walk", "#/components/schemas/Walk":
                    self = .Walk(try .init(from: decoder))
                case "MessagedExercise", "#/components/schemas/MessagedExercise":
                    self = .MessagedExercise(try .init(from: decoder))
                default:
                    throw Swift.DecodingError.unknownOneOfDiscriminator(
                        discriminatorKey: CodingKeys.kind,
                        discriminatorValue: discriminator,
                        codingPath: decoder.codingPath
                    )
                }
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .Walk(value):
                    try value.encode(to: encoder)
                case let .MessagedExercise(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/PetStats`.
        public struct PetStats: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PetStats/count`.
            public var count: Swift.Int
            /// Creates a new `PetStats`.
            ///
            /// - Parameters:
            ///   - count:
            public init(count: Swift.Int) {
                self.count = count
            }
            public enum CodingKeys: String, CodingKey {
                case count
            }
        }
        /// - Remark: Generated from `#/components/schemas/RecursivePet`.
        public struct RecursivePet: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RecursivePet/name`.
            public var name: Swift.String {
                get  {
                    storage.value.name
                }
                _modify {
                    yield &storage.value.name
                }
            }
            /// - Remark: Generated from `#/components/schemas/RecursivePet/parent`.
            public var parent: Components.Schemas.RecursivePet? {
                get  {
                    storage.value.parent
                }
                _modify {
                    yield &storage.value.parent
                }
            }
            /// Creates a new `RecursivePet`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - parent:
            public init(
                name: Swift.String,
                parent: Components.Schemas.RecursivePet? = nil
            ) {
                storage = .init(value: .init(
                    name: name,
                    parent: parent
                ))
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case parent
            }
            public init(from decoder: any Decoder) throws {
                storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RecursivePet/name`.
                var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/RecursivePet/parent`.
                var parent: Components.Schemas.RecursivePet?
                init(
                    name: Swift.String,
                    parent: Components.Schemas.RecursivePet? = nil
                ) {
                    self.name = name
                    self.parent = parent
                }
                typealias CodingKeys = Components.Schemas.RecursivePet.CodingKeys
            }
        }
        /// - Remark: Generated from `#/components/schemas/RecursivePetNested`.
        public struct RecursivePetNested: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RecursivePetNested/name`.
            public var name: Swift.String {
                get  {
                    storage.value.name
                }
                _modify {
                    yield &storage.value.name
                }
            }
            /// - Remark: Generated from `#/components/schemas/RecursivePetNested/parent`.
            public struct parentPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RecursivePetNested/parent/nested`.
                public var nested: Components.Schemas.RecursivePetNested
                /// Creates a new `parentPayload`.
                ///
                /// - Parameters:
                ///   - nested:
                public init(nested: Components.Schemas.RecursivePetNested) {
                    self.nested = nested
                }
                public enum CodingKeys: String, CodingKey {
                    case nested
                }
            }
            /// - Remark: Generated from `#/components/schemas/RecursivePetNested/parent`.
            public var parent: Components.Schemas.RecursivePetNested.parentPayload? {
                get  {
                    storage.value.parent
                }
                _modify {
                    yield &storage.value.parent
                }
            }
            /// Creates a new `RecursivePetNested`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - parent:
            public init(
                name: Swift.String,
                parent: Components.Schemas.RecursivePetNested.parentPayload? = nil
            ) {
                storage = .init(value: .init(
                    name: name,
                    parent: parent
                ))
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case parent
            }
            public init(from decoder: any Decoder) throws {
                storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RecursivePetNested/name`.
                var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/RecursivePetNested/parent`.
                struct parentPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RecursivePetNested/parent/nested`.
                    public var nested: Components.Schemas.RecursivePetNested
                    /// Creates a new `parentPayload`.
                    ///
                    /// - Parameters:
                    ///   - nested:
                    public init(nested: Components.Schemas.RecursivePetNested) {
                        self.nested = nested
                    }
                    public enum CodingKeys: String, CodingKey {
                        case nested
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RecursivePetNested/parent`.
                var parent: Components.Schemas.RecursivePetNested.parentPayload?
                init(
                    name: Swift.String,
                    parent: Components.Schemas.RecursivePetNested.parentPayload? = nil
                ) {
                    self.name = name
                    self.parent = parent
                }
                typealias CodingKeys = Components.Schemas.RecursivePetNested.CodingKeys
            }
        }
        /// - Remark: Generated from `#/components/schemas/RecursivePetOneOfFirst`.
        public struct RecursivePetOneOfFirst: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RecursivePetOneOfFirst/value1`.
            public var value1: Components.Schemas.RecursivePetOneOf {
                get  {
                    storage.value.value1
                }
                _modify {
                    yield &storage.value.value1
                }
            }
            /// - Remark: Generated from `#/components/schemas/RecursivePetOneOfFirst/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RecursivePetOneOfFirst/value2/type`.
                public var _type: Swift.String
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: Swift.String) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/RecursivePetOneOfFirst/value2`.
            public var value2: Components.Schemas.RecursivePetOneOfFirst.Value2Payload {
                get  {
                    storage.value.value2
                }
                _modify {
                    yield &storage.value.value2
                }
            }
            /// Creates a new `RecursivePetOneOfFirst`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.RecursivePetOneOf,
                value2: Components.Schemas.RecursivePetOneOfFirst.Value2Payload
            ) {
                storage = .init(value: .init(
                    value1: value1,
                    value2: value2
                ))
            }
            public init(from decoder: any Decoder) throws {
                storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RecursivePetOneOfFirst/value1`.
                var value1: Components.Schemas.RecursivePetOneOf
                /// - Remark: Generated from `#/components/schemas/RecursivePetOneOfFirst/value2`.
                struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RecursivePetOneOfFirst/value2/type`.
                    public var _type: Swift.String
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - _type:
                    public init(_type: Swift.String) {
                        self._type = _type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RecursivePetOneOfFirst/value2`.
                var value2: Components.Schemas.RecursivePetOneOfFirst.Value2Payload
                init(
                    value1: Components.Schemas.RecursivePetOneOf,
                    value2: Components.Schemas.RecursivePetOneOfFirst.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/RecursivePetOneOfSecond`.
        public struct RecursivePetOneOfSecond: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RecursivePetOneOfSecond/value1`.
            public var value1: Components.Schemas.Pet
            /// - Remark: Generated from `#/components/schemas/RecursivePetOneOfSecond/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RecursivePetOneOfSecond/value2/type`.
                public var _type: Swift.String
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: Swift.String) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/RecursivePetOneOfSecond/value2`.
            public var value2: Components.Schemas.RecursivePetOneOfSecond.Value2Payload
            /// Creates a new `RecursivePetOneOfSecond`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.Pet,
                value2: Components.Schemas.RecursivePetOneOfSecond.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/RecursivePetOneOf`.
        @frozen public enum RecursivePetOneOf: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RecursivePetOneOf/RecursivePetOneOfFirst`.
            case RecursivePetOneOfFirst(Components.Schemas.RecursivePetOneOfFirst)
            /// - Remark: Generated from `#/components/schemas/RecursivePetOneOf/RecursivePetOneOfSecond`.
            case RecursivePetOneOfSecond(Components.Schemas.RecursivePetOneOfSecond)
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                let discriminator = try container.decode(
                    Swift.String.self,
                    forKey: ._type
                )
                switch discriminator {
                case "RecursivePetOneOfFirst", "#/components/schemas/RecursivePetOneOfFirst":
                    self = .RecursivePetOneOfFirst(try .init(from: decoder))
                case "RecursivePetOneOfSecond", "#/components/schemas/RecursivePetOneOfSecond":
                    self = .RecursivePetOneOfSecond(try .init(from: decoder))
                default:
                    throw Swift.DecodingError.unknownOneOfDiscriminator(
                        discriminatorKey: CodingKeys._type,
                        discriminatorValue: discriminator,
                        codingPath: decoder.codingPath
                    )
                }
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .RecursivePetOneOfFirst(value):
                    try value.encode(to: encoder)
                case let .RecursivePetOneOfSecond(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/RecursivePetAnyOf`.
        public struct RecursivePetAnyOf: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RecursivePetAnyOf/value1`.
            public var value1: Components.Schemas.RecursivePetAnyOf? {
                get  {
                    storage.value.value1
                }
                _modify {
                    yield &storage.value.value1
                }
            }
            /// - Remark: Generated from `#/components/schemas/RecursivePetAnyOf/value2`.
            public var value2: Swift.String? {
                get  {
                    storage.value.value2
                }
                _modify {
                    yield &storage.value.value2
                }
            }
            /// Creates a new `RecursivePetAnyOf`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.RecursivePetAnyOf? = nil,
                value2: Swift.String? = nil
            ) {
                storage = .init(value: .init(
                    value1: value1,
                    value2: value2
                ))
            }
            public init(from decoder: any Decoder) throws {
                storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RecursivePetAnyOf/value1`.
                var value1: Components.Schemas.RecursivePetAnyOf?
                /// - Remark: Generated from `#/components/schemas/RecursivePetAnyOf/value2`.
                var value2: Swift.String?
                init(
                    value1: Components.Schemas.RecursivePetAnyOf? = nil,
                    value2: Swift.String? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value2
                    ])
                    try value1?.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/RecursivePetAllOf`.
        public struct RecursivePetAllOf: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RecursivePetAllOf/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RecursivePetAllOf/value1/parent`.
                public var parent: Components.Schemas.RecursivePetAllOf?
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - parent:
                public init(parent: Components.Schemas.RecursivePetAllOf? = nil) {
                    self.parent = parent
                }
                public enum CodingKeys: String, CodingKey {
                    case parent
                }
            }
            /// - Remark: Generated from `#/components/schemas/RecursivePetAllOf/value1`.
            public var value1: Components.Schemas.RecursivePetAllOf.Value1Payload {
                get  {
                    storage.value.value1
                }
                _modify {
                    yield &storage.value.value1
                }
            }
            /// Creates a new `RecursivePetAllOf`.
            ///
            /// - Parameters:
            ///   - value1:
            public init(value1: Components.Schemas.RecursivePetAllOf.Value1Payload) {
                storage = .init(value: .init(value1: value1))
            }
            public init(from decoder: any Decoder) throws {
                storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RecursivePetAllOf/value1`.
                struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RecursivePetAllOf/value1/parent`.
                    public var parent: Components.Schemas.RecursivePetAllOf?
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - parent:
                    public init(parent: Components.Schemas.RecursivePetAllOf? = nil) {
                        self.parent = parent
                    }
                    public enum CodingKeys: String, CodingKey {
                        case parent
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RecursivePetAllOf/value1`.
                var value1: Components.Schemas.RecursivePetAllOf.Value1Payload
                init(value1: Components.Schemas.RecursivePetAllOf.Value1Payload) {
                    self.value1 = value1
                }
                init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// Supply this parameter to filter pets born since the provided date.
        ///
        /// - Remark: Generated from `#/components/parameters/query.born-since`.
        public typealias query_period_born_hyphen_since = Components.Schemas.DOB
        /// The id of the pet to retrieve
        ///
        /// - Remark: Generated from `#/components/parameters/path.petId`.
        public typealias path_period_petId = Swift.Int64
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {
        /// - Remark: Generated from `#/components/requestBodies/UpdatePetRequest`.
        @frozen public enum UpdatePetRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/UpdatePetRequest/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// Pet name
                ///
                /// - Remark: Generated from `#/components/requestBodies/UpdatePetRequest/json/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/requestBodies/UpdatePetRequest/json/kind`.
                public var kind: Components.Schemas.PetKind?
                /// - Remark: Generated from `#/components/requestBodies/UpdatePetRequest/json/tag`.
                public var tag: Swift.String?
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - name: Pet name
                ///   - kind:
                ///   - tag:
                public init(
                    name: Swift.String? = nil,
                    kind: Components.Schemas.PetKind? = nil,
                    tag: Swift.String? = nil
                ) {
                    self.name = name
                    self.kind = kind
                    self.tag = tag
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case kind
                    case tag
                }
            }
            /// - Remark: Generated from `#/components/requestBodies/UpdatePetRequest/content/application\/json`.
            case json(Components.RequestBodies.UpdatePetRequest.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/MultipartUploadTypedRequest`.
        @frozen public enum MultipartUploadTypedRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/MultipartUploadTypedRequest/multipartForm`.
            @frozen public enum multipartFormPayload: Sendable, Hashable {
                /// - Remark: Generated from `#/components/requestBodies/MultipartUploadTypedRequest/multipartForm/log`.
                public struct logPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/requestBodies/MultipartUploadTypedRequest/multipartForm/log/headers`.
                    public struct Headers: Sendable, Hashable {
                        /// - Remark: Generated from `#/components/requestBodies/MultipartUploadTypedRequest/multipartForm/log/headers/x-log-type`.
                        @frozen public enum x_hyphen_log_hyphen_typePayload: String, Codable, Hashable, Sendable {
                            case structured = "structured"
                            case unstructured = "unstructured"
                        }
                        /// The type of the log.
                        ///
                        /// - Remark: Generated from `#/components/requestBodies/MultipartUploadTypedRequest/multipartForm/log/headers/x-log-type`.
                        public var x_hyphen_log_hyphen_type: Components.RequestBodies.MultipartUploadTypedRequest.multipartFormPayload.logPayload.Headers.x_hyphen_log_hyphen_typePayload?
                        /// Creates a new `Headers`.
                        ///
                        /// - Parameters:
                        ///   - x_hyphen_log_hyphen_type: The type of the log.
                        public init(x_hyphen_log_hyphen_type: Components.RequestBodies.MultipartUploadTypedRequest.multipartFormPayload.logPayload.Headers.x_hyphen_log_hyphen_typePayload? = nil) {
                            self.x_hyphen_log_hyphen_type = x_hyphen_log_hyphen_type
                        }
                    }
                    /// Received HTTP response headers
                    public var headers: Components.RequestBodies.MultipartUploadTypedRequest.multipartFormPayload.logPayload.Headers
                    public var body: OpenAPIRuntime.HTTPBody
                    /// Creates a new `logPayload`.
                    ///
                    /// - Parameters:
                    ///   - headers: Received HTTP response headers
                    ///   - body:
                    public init(
                        headers: Components.RequestBodies.MultipartUploadTypedRequest.multipartFormPayload.logPayload.Headers = .init(),
                        body: OpenAPIRuntime.HTTPBody
                    ) {
                        self.headers = headers
                        self.body = body
                    }
                }
                case log(OpenAPIRuntime.MultipartPart<Components.RequestBodies.MultipartUploadTypedRequest.multipartFormPayload.logPayload>)
                /// - Remark: Generated from `#/components/requestBodies/MultipartUploadTypedRequest/multipartForm/metadata`.
                public struct metadataPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/requestBodies/MultipartUploadTypedRequest/multipartForm/metadata/content/body`.
                    public struct bodyPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/requestBodies/MultipartUploadTypedRequest/multipartForm/metadata/content/body/createdAt`.
                        public var createdAt: Foundation.Date
                        /// Creates a new `bodyPayload`.
                        ///
                        /// - Parameters:
                        ///   - createdAt:
                        public init(createdAt: Foundation.Date) {
                            self.createdAt = createdAt
                        }
                        public enum CodingKeys: String, CodingKey {
                            case createdAt
                        }
                    }
                    public var body: Components.RequestBodies.MultipartUploadTypedRequest.multipartFormPayload.metadataPayload.bodyPayload
                    /// Creates a new `metadataPayload`.
                    ///
                    /// - Parameters:
                    ///   - body:
                    public init(body: Components.RequestBodies.MultipartUploadTypedRequest.multipartFormPayload.metadataPayload.bodyPayload) {
                        self.body = body
                    }
                }
                case metadata(OpenAPIRuntime.MultipartPart<Components.RequestBodies.MultipartUploadTypedRequest.multipartFormPayload.metadataPayload>)
                /// - Remark: Generated from `#/components/requestBodies/MultipartUploadTypedRequest/multipartForm/keyword`.
                public struct keywordPayload: Sendable, Hashable {
                    public var body: OpenAPIRuntime.HTTPBody
                    /// Creates a new `keywordPayload`.
                    ///
                    /// - Parameters:
                    ///   - body:
                    public init(body: OpenAPIRuntime.HTTPBody) {
                        self.body = body
                    }
                }
                case keyword(OpenAPIRuntime.MultipartPart<Components.RequestBodies.MultipartUploadTypedRequest.multipartFormPayload.keywordPayload>)
                case undocumented(OpenAPIRuntime.MultipartRawPart)
            }
            /// - Remark: Generated from `#/components/requestBodies/MultipartUploadTypedRequest/content/multipart\/form-data`.
            case multipartForm(OpenAPIRuntime.MultipartBody<Components.RequestBodies.MultipartUploadTypedRequest.multipartFormPayload>)
        }
    }
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct ErrorBadRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/ErrorBadRequest/headers`.
            public struct Headers: Sendable, Hashable {
                /// A description here.
                ///
                /// - Remark: Generated from `#/components/responses/ErrorBadRequest/headers/X-Reason`.
                public var X_hyphen_Reason: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Reason: A description here.
                public init(X_hyphen_Reason: Swift.String? = nil) {
                    self.X_hyphen_Reason = X_hyphen_Reason
                }
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.ErrorBadRequest.Headers
            /// - Remark: Generated from `#/components/responses/ErrorBadRequest/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/ErrorBadRequest/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/ErrorBadRequest/content/json/code`.
                    public var code: Swift.Int
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    public init(code: Swift.Int) {
                        self.code = code
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                    }
                }
                /// - Remark: Generated from `#/components/responses/ErrorBadRequest/content/application\/json`.
                case json(Components.Responses.ErrorBadRequest.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.ErrorBadRequest.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.ErrorBadRequest.Body
            /// Creates a new `ErrorBadRequest`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.ErrorBadRequest.Headers = .init(),
                body: Components.Responses.ErrorBadRequest.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        public struct MultipartDownloadTypedResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/MultipartDownloadTypedResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/MultipartDownloadTypedResponse/content/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/responses/MultipartDownloadTypedResponse/content/multipartForm/log`.
                    public struct logPayload: Sendable, Hashable {
                        /// - Remark: Generated from `#/components/responses/MultipartDownloadTypedResponse/content/multipartForm/log/headers`.
                        public struct Headers: Sendable, Hashable {
                            /// - Remark: Generated from `#/components/responses/MultipartDownloadTypedResponse/content/multipartForm/log/headers/x-log-type`.
                            @frozen public enum x_hyphen_log_hyphen_typePayload: String, Codable, Hashable, Sendable {
                                case structured = "structured"
                                case unstructured = "unstructured"
                            }
                            /// The type of the log.
                            ///
                            /// - Remark: Generated from `#/components/responses/MultipartDownloadTypedResponse/content/multipartForm/log/headers/x-log-type`.
                            public var x_hyphen_log_hyphen_type: Components.Responses.MultipartDownloadTypedResponse.Body.multipartFormPayload.logPayload.Headers.x_hyphen_log_hyphen_typePayload?
                            /// Creates a new `Headers`.
                            ///
                            /// - Parameters:
                            ///   - x_hyphen_log_hyphen_type: The type of the log.
                            public init(x_hyphen_log_hyphen_type: Components.Responses.MultipartDownloadTypedResponse.Body.multipartFormPayload.logPayload.Headers.x_hyphen_log_hyphen_typePayload? = nil) {
                                self.x_hyphen_log_hyphen_type = x_hyphen_log_hyphen_type
                            }
                        }
                        /// Received HTTP response headers
                        public var headers: Components.Responses.MultipartDownloadTypedResponse.Body.multipartFormPayload.logPayload.Headers
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `logPayload`.
                        ///
                        /// - Parameters:
                        ///   - headers: Received HTTP response headers
                        ///   - body:
                        public init(
                            headers: Components.Responses.MultipartDownloadTypedResponse.Body.multipartFormPayload.logPayload.Headers = .init(),
                            body: OpenAPIRuntime.HTTPBody
                        ) {
                            self.headers = headers
                            self.body = body
                        }
                    }
                    case log(OpenAPIRuntime.MultipartPart<Components.Responses.MultipartDownloadTypedResponse.Body.multipartFormPayload.logPayload>)
                    /// - Remark: Generated from `#/components/responses/MultipartDownloadTypedResponse/content/multipartForm/metadata`.
                    public struct metadataPayload: Sendable, Hashable {
                        /// - Remark: Generated from `#/components/responses/MultipartDownloadTypedResponse/content/multipartForm/metadata/content/body`.
                        public struct bodyPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/responses/MultipartDownloadTypedResponse/content/multipartForm/metadata/content/body/createdAt`.
                            public var createdAt: Foundation.Date
                            /// Creates a new `bodyPayload`.
                            ///
                            /// - Parameters:
                            ///   - createdAt:
                            public init(createdAt: Foundation.Date) {
                                self.createdAt = createdAt
                            }
                            public enum CodingKeys: String, CodingKey {
                                case createdAt
                            }
                        }
                        public var body: Components.Responses.MultipartDownloadTypedResponse.Body.multipartFormPayload.metadataPayload.bodyPayload
                        /// Creates a new `metadataPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: Components.Responses.MultipartDownloadTypedResponse.Body.multipartFormPayload.metadataPayload.bodyPayload) {
                            self.body = body
                        }
                    }
                    case metadata(OpenAPIRuntime.MultipartPart<Components.Responses.MultipartDownloadTypedResponse.Body.multipartFormPayload.metadataPayload>)
                    /// - Remark: Generated from `#/components/responses/MultipartDownloadTypedResponse/content/multipartForm/keyword`.
                    public struct keywordPayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `keywordPayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case keyword(OpenAPIRuntime.MultipartPart<Components.Responses.MultipartDownloadTypedResponse.Body.multipartFormPayload.keywordPayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/components/responses/MultipartDownloadTypedResponse/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Responses.MultipartDownloadTypedResponse.Body.multipartFormPayload>)
                /// The associated value of the enum case if `self` is `.multipartForm`.
                ///
                /// - Throws: An error if `self` is not `.multipartForm`.
                /// - SeeAlso: `.multipartForm`.
                public var multipartForm: OpenAPIRuntime.MultipartBody<Components.Responses.MultipartDownloadTypedResponse.Body.multipartFormPayload> {
                    get throws {
                        switch self {
                        case let .multipartForm(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.MultipartDownloadTypedResponse.Body
            /// Creates a new `MultipartDownloadTypedResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.MultipartDownloadTypedResponse.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// A description here.
        ///
        /// - Remark: Generated from `#/components/headers/TracingHeader`.
        public typealias TracingHeader = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List all pets
    ///
    /// You can fetch
    /// all the pets here
    ///
    /// - Remark: HTTP `GET /pets`.
    /// - Remark: Generated from `#/paths//pets/get(listPets)`.
    public enum listPets {
        public static let id: Swift.String = "listPets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/pets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// How many items to return at one time (max 100)
                ///
                /// - Remark: Generated from `#/paths/pets/GET/query/limit`.
                public var limit: Swift.Int32?
                /// - Remark: Generated from `#/paths/pets/GET/query/habitat`.
                @frozen public enum habitatPayload: String, Codable, Hashable, Sendable {
                    case water = "water"
                    case land = "land"
                    case air = "air"
                    case _empty = ""
                }
                /// - Remark: Generated from `#/paths/pets/GET/query/habitat`.
                public var habitat: Operations.listPets.Input.Query.habitatPayload?
                /// - Remark: Generated from `#/paths/pets/GET/query/feedsPayload`.
                @frozen public enum feedsPayloadPayload: String, Codable, Hashable, Sendable {
                    case omnivore = "omnivore"
                    case carnivore = "carnivore"
                    case herbivore = "herbivore"
                }
                /// - Remark: Generated from `#/paths/pets/GET/query/feeds`.
                public typealias feedsPayload = [Operations.listPets.Input.Query.feedsPayloadPayload]
                /// - Remark: Generated from `#/paths/pets/GET/query/feeds`.
                public var feeds: Operations.listPets.Input.Query.feedsPayload?
                /// Supply this parameter to filter pets born since the provided date.
                ///
                /// - Remark: Generated from `#/paths/pets/GET/query/since`.
                public var since: Components.Parameters.query_period_born_hyphen_since?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: How many items to return at one time (max 100)
                ///   - habitat:
                ///   - feeds:
                ///   - since: Supply this parameter to filter pets born since the provided date.
                public init(
                    limit: Swift.Int32? = nil,
                    habitat: Operations.listPets.Input.Query.habitatPayload? = nil,
                    feeds: Operations.listPets.Input.Query.feedsPayload? = nil,
                    since: Components.Parameters.query_period_born_hyphen_since? = nil
                ) {
                    self.limit = limit
                    self.habitat = habitat
                    self.feeds = feeds
                    self.since = since
                }
            }
            public var query: Operations.listPets.Input.Query
            /// - Remark: Generated from `#/paths/pets/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// Request identifier
                ///
                /// - Remark: Generated from `#/paths/pets/GET/header/My-Request-UUID`.
                public var My_hyphen_Request_hyphen_UUID: Swift.String?
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listPets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - My_hyphen_Request_hyphen_UUID: Request identifier
                ///   - accept:
                public init(
                    My_hyphen_Request_hyphen_UUID: Swift.String? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listPets.AcceptableContentType>] = .defaultValues()
                ) {
                    self.My_hyphen_Request_hyphen_UUID = My_hyphen_Request_hyphen_UUID
                    self.accept = accept
                }
            }
            public var headers: Operations.listPets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.listPets.Input.Query = .init(),
                headers: Operations.listPets.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pets/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// Response identifier
                    ///
                    /// - Remark: Generated from `#/paths/pets/GET/responses/200/headers/My-Response-UUID`.
                    public var My_hyphen_Response_hyphen_UUID: Swift.String
                    /// A description here.
                    ///
                    /// - Remark: Generated from `#/paths/pets/GET/responses/200/headers/My-Tracing-Header`.
                    public var My_hyphen_Tracing_hyphen_Header: Components.Headers.TracingHeader?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - My_hyphen_Response_hyphen_UUID: Response identifier
                    ///   - My_hyphen_Tracing_hyphen_Header: A description here.
                    public init(
                        My_hyphen_Response_hyphen_UUID: Swift.String,
                        My_hyphen_Tracing_hyphen_Header: Components.Headers.TracingHeader? = nil
                    ) {
                        self.My_hyphen_Response_hyphen_UUID = My_hyphen_Response_hyphen_UUID
                        self.My_hyphen_Tracing_hyphen_Header = My_hyphen_Tracing_hyphen_Header
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.listPets.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/pets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pets/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Pets)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Pets {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listPets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.listPets.Output.Ok.Headers,
                    body: Operations.listPets.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A paged array of pets
            ///
            /// - Remark: Generated from `#/paths//pets/get(listPets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listPets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.listPets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Default: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pets/GET/responses/default/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pets/GET/responses/default/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listPets.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.listPets.Output.Default.Body) {
                    self.body = body
                }
            }
            /// Unexpected error
            ///
            /// - Remark: Generated from `#/paths//pets/get(listPets)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Operations.listPets.Output.Default)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Operations.listPets.Output.Default {
                get throws {
                    switch self {
                    case let .`default`(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "default",
                            response: self
                        )
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a pet
    ///
    /// - Remark: HTTP `POST /pets`.
    /// - Remark: Generated from `#/paths//pets/post(createPet)`.
    public enum createPet {
        public static let id: Swift.String = "createPet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/pets/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// A description here.
                ///
                /// - Remark: Generated from `#/paths/pets/POST/header/X-Extra-Arguments`.
                public var X_hyphen_Extra_hyphen_Arguments: Components.Schemas.CodeError?
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createPet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Extra_hyphen_Arguments: A description here.
                ///   - accept:
                public init(
                    X_hyphen_Extra_hyphen_Arguments: Components.Schemas.CodeError? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createPet.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Extra_hyphen_Arguments = X_hyphen_Extra_hyphen_Arguments
                    self.accept = accept
                }
            }
            public var headers: Operations.createPet.Input.Headers
            /// - Remark: Generated from `#/paths/pets/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pets/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreatePetRequest)
            }
            public var body: Operations.createPet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createPet.Input.Headers = .init(),
                body: Operations.createPet.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pets/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// A description here.
                    ///
                    /// - Remark: Generated from `#/paths/pets/POST/responses/201/headers/X-Extra-Arguments`.
                    public var X_hyphen_Extra_hyphen_Arguments: Components.Schemas.CodeError?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - X_hyphen_Extra_hyphen_Arguments: A description here.
                    public init(X_hyphen_Extra_hyphen_Arguments: Components.Schemas.CodeError? = nil) {
                        self.X_hyphen_Extra_hyphen_Arguments = X_hyphen_Extra_hyphen_Arguments
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.createPet.Output.Created.Headers
                /// - Remark: Generated from `#/paths/pets/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pets/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.Pet)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Pet {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createPet.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createPet.Output.Created.Headers = .init(),
                    body: Operations.createPet.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Successfully created pet
            ///
            /// - Remark: Generated from `#/paths//pets/post(createPet)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.createPet.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.createPet.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//pets/post(createPet)/responses/4XX`.
            ///
            /// HTTP response code: `400...499 clientError`.
            case clientError(statusCode: Swift.Int, Components.Responses.ErrorBadRequest)
            /// The associated value of the enum case if `self` is `.clientError`.
            ///
            /// - Throws: An error if `self` is not `.clientError`.
            /// - SeeAlso: `.clientError`.
            public var clientError: Components.Responses.ErrorBadRequest {
                get throws {
                    switch self {
                    case let .clientError(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "clientError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a pet using a url form
    ///
    /// - Remark: HTTP `POST /pets/create`.
    /// - Remark: Generated from `#/paths//pets/create/post(createPetWithForm)`.
    public enum createPetWithForm {
        public static let id: Swift.String = "createPetWithForm"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/pets/create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pets/create/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Components.Schemas.CreatePetRequest)
            }
            public var body: Operations.createPetWithForm.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - body:
            public init(body: Operations.createPetWithForm.Input.Body) {
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Successfully created pet using a url form
            ///
            /// - Remark: Generated from `#/paths//pets/create/post(createPetWithForm)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.createPetWithForm.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.createPetWithForm.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `GET /pets/stats`.
    /// - Remark: Generated from `#/paths//pets/stats/get(getStats)`.
    public enum getStats {
        public static let id: Swift.String = "getStats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/pets/stats/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStats.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStats.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getStats.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getStats.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pets/stats/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pets/stats/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PetStats)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PetStats {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/pets/stats/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    public var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/pets/stats/GET/responses/200/content/application\/octet-stream`.
                    case binary(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.binary`.
                    ///
                    /// - Throws: An error if `self` is not `.binary`.
                    /// - SeeAlso: `.binary`.
                    public var binary: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .binary(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/octet-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getStats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getStats.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A successful response.
            ///
            /// - Remark: Generated from `#/paths//pets/stats/get(getStats)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getStats.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getStats.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case binary
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                case "application/octet-stream":
                    self = .binary
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                case .binary:
                    return "application/octet-stream"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .plainText,
                    .binary
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /pets/stats`.
    /// - Remark: Generated from `#/paths//pets/stats/post(postStats)`.
    public enum postStats {
        public static let id: Swift.String = "postStats"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/pets/stats/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pets/stats/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.PetStats)
                /// - Remark: Generated from `#/paths/pets/stats/POST/requestBody/content/text\/plain`.
                case plainText(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/pets/stats/POST/requestBody/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.postStats.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - body:
            public init(body: Operations.postStats.Input.Body) {
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Accepted: Sendable, Hashable {
                /// Creates a new `Accepted`.
                public init() {}
            }
            /// Accepted data.
            ///
            /// - Remark: Generated from `#/paths//pets/stats/post(postStats)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.postStats.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.postStats.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `POST /probe/`.
    /// - Remark: Generated from `#/paths//probe//post(probe)`.
    public enum probe {
        public static let id: Swift.String = "probe"
        public struct Input: Sendable, Hashable {
            /// Creates a new `Input`.
            public init() {}
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Ack
            ///
            /// - Remark: Generated from `#/paths//probe//post(probe)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.probe.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.probe.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Update just a specific property of an existing pet. Nothing is updated if no request body is provided.
    ///
    /// - Remark: HTTP `PATCH /pets/{petId}`.
    /// - Remark: Generated from `#/paths//pets/{petId}/patch(updatePet)`.
    public enum updatePet {
        public static let id: Swift.String = "updatePet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/pets/{petId}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// Id of the pet
                ///
                /// - Remark: Generated from `#/paths/pets/{petId}/PATCH/path/petId`.
                public var petId: Swift.Int64
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - petId: Id of the pet
                public init(petId: Swift.Int64) {
                    self.petId = petId
                }
            }
            public var path: Operations.updatePet.Input.Path
            /// - Remark: Generated from `#/paths/pets/{petId}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.updatePet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.updatePet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.updatePet.Input.Headers
            public var body: Components.RequestBodies.UpdatePetRequest?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.updatePet.Input.Path,
                headers: Operations.updatePet.Input.Headers = .init(),
                body: Components.RequestBodies.UpdatePetRequest? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Successfully updated
            ///
            /// - Remark: Generated from `#/paths//pets/{petId}/patch(updatePet)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.updatePet.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.updatePet.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pets/{petId}/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pets/{petId}/PATCH/responses/400/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/pets/{petId}/PATCH/responses/400/content/json/message`.
                        public var message: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        public init(message: Swift.String) {
                            self.message = message
                        }
                        public enum CodingKeys: String, CodingKey {
                            case message
                        }
                    }
                    /// - Remark: Generated from `#/paths/pets/{petId}/PATCH/responses/400/content/application\/json`.
                    case json(Operations.updatePet.Output.BadRequest.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.updatePet.Output.BadRequest.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.updatePet.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.updatePet.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Update input error
            ///
            /// - Remark: Generated from `#/paths//pets/{petId}/patch(updatePet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.updatePet.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.updatePet.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Upload an avatar
    ///
    /// - Remark: HTTP `PUT /pets/{petId}/avatar`.
    /// - Remark: Generated from `#/paths//pets/{petId}/avatar/put(uploadAvatarForPet)`.
    public enum uploadAvatarForPet {
        public static let id: Swift.String = "uploadAvatarForPet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/pets/{petId}/avatar/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The id of the pet to retrieve
                ///
                /// - Remark: Generated from `#/paths/pets/{petId}/avatar/PUT/path/petId`.
                public var petId: Components.Parameters.path_period_petId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - petId: The id of the pet to retrieve
                public init(petId: Components.Parameters.path_period_petId) {
                    self.petId = petId
                }
            }
            public var path: Operations.uploadAvatarForPet.Input.Path
            /// - Remark: Generated from `#/paths/pets/{petId}/avatar/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.uploadAvatarForPet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.uploadAvatarForPet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.uploadAvatarForPet.Input.Headers
            /// - Remark: Generated from `#/paths/pets/{petId}/avatar/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pets/{petId}/avatar/PUT/requestBody/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.uploadAvatarForPet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.uploadAvatarForPet.Input.Path,
                headers: Operations.uploadAvatarForPet.Input.Headers = .init(),
                body: Operations.uploadAvatarForPet.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pets/{petId}/avatar/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pets/{petId}/avatar/PUT/responses/200/content/application\/octet-stream`.
                    case binary(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.binary`.
                    ///
                    /// - Throws: An error if `self` is not `.binary`.
                    /// - SeeAlso: `.binary`.
                    public var binary: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .binary(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.uploadAvatarForPet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.uploadAvatarForPet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Echoes avatar back
            ///
            /// - Remark: Generated from `#/paths//pets/{petId}/avatar/put(uploadAvatarForPet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.uploadAvatarForPet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.uploadAvatarForPet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct PreconditionFailed: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pets/{petId}/avatar/PUT/responses/412/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pets/{petId}/avatar/PUT/responses/412/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.uploadAvatarForPet.Output.PreconditionFailed.Body
                /// Creates a new `PreconditionFailed`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.uploadAvatarForPet.Output.PreconditionFailed.Body) {
                    self.body = body
                }
            }
            /// Avatar is not acceptable
            ///
            /// - Remark: Generated from `#/paths//pets/{petId}/avatar/put(uploadAvatarForPet)/responses/412`.
            ///
            /// HTTP response code: `412 preconditionFailed`.
            case preconditionFailed(Operations.uploadAvatarForPet.Output.PreconditionFailed)
            /// The associated value of the enum case if `self` is `.preconditionFailed`.
            ///
            /// - Throws: An error if `self` is not `.preconditionFailed`.
            /// - SeeAlso: `.preconditionFailed`.
            public var preconditionFailed: Operations.uploadAvatarForPet.Output.PreconditionFailed {
                get throws {
                    switch self {
                    case let .preconditionFailed(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "preconditionFailed",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/pets/{petId}/avatar/PUT/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/pets/{petId}/avatar/PUT/responses/500/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    public var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.uploadAvatarForPet.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.uploadAvatarForPet.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//pets/{petId}/avatar/put(uploadAvatarForPet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.uploadAvatarForPet.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.uploadAvatarForPet.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case binary
            case json
            case plainText
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/octet-stream":
                    self = .binary
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .binary:
                    return "application/octet-stream"
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                }
            }
            public static var allCases: [Self] {
                [
                    .binary,
                    .json,
                    .plainText
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /pets/multipart-typed`.
    /// - Remark: Generated from `#/paths//pets/multipart-typed/get(multipartDownloadTyped)`.
    public enum multipartDownloadTyped {
        public static let id: Swift.String = "multipartDownloadTyped"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/pets/multipart-typed/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.multipartDownloadTyped.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.multipartDownloadTyped.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.multipartDownloadTyped.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.multipartDownloadTyped.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// A typed multipart response.
            ///
            /// - Remark: Generated from `#/paths//pets/multipart-typed/get(multipartDownloadTyped)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.MultipartDownloadTypedResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.MultipartDownloadTypedResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case multipartForm
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "multipart/form-data":
                    self = .multipartForm
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .multipartForm:
                    return "multipart/form-data"
                }
            }
            public static var allCases: [Self] {
                [
                    .multipartForm
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /pets/multipart-typed`.
    /// - Remark: Generated from `#/paths//pets/multipart-typed/post(multipartUploadTyped)`.
    public enum multipartUploadTyped {
        public static let id: Swift.String = "multipartUploadTyped"
        public struct Input: Sendable, Hashable {
            public var body: Components.RequestBodies.MultipartUploadTypedRequest
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - body:
            public init(body: Components.RequestBodies.MultipartUploadTypedRequest) {
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Accepted: Sendable, Hashable {
                /// Creates a new `Accepted`.
                public init() {}
            }
            /// Successfully accepted the data.
            ///
            /// - Remark: Generated from `#/paths//pets/multipart-typed/post(multipartUploadTyped)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.multipartUploadTyped.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.multipartUploadTyped.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
