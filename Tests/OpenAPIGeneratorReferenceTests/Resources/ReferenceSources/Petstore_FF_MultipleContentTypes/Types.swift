// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import Foundation
#else
import Foundation
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List all pets
    ///
    /// You can fetch
    /// all the pets here
    ///
    /// - Remark: HTTP `GET /pets`.
    /// - Remark: Generated from `#/paths//pets/get(listPets)`.
    func listPets(_ input: Operations.listPets.Input) async throws -> Operations.listPets.Output
    /// Create a pet
    ///
    /// - Remark: HTTP `POST /pets`.
    /// - Remark: Generated from `#/paths//pets/post(createPet)`.
    func createPet(_ input: Operations.createPet.Input) async throws -> Operations.createPet.Output
    /// - Remark: HTTP `GET /pets/stats`.
    /// - Remark: Generated from `#/paths//pets/stats/get(getStats)`.
    func getStats(_ input: Operations.getStats.Input) async throws -> Operations.getStats.Output
    /// - Remark: HTTP `POST /pets/stats`.
    /// - Remark: Generated from `#/paths//pets/stats/post(postStats)`.
    func postStats(_ input: Operations.postStats.Input) async throws -> Operations.postStats.Output
    /// - Remark: HTTP `POST /probe/`.
    /// - Remark: Generated from `#/paths//probe//post(probe)`.
    @available(*, deprecated) func probe(_ input: Operations.probe.Input) async throws
        -> Operations.probe.Output
    /// Update just a specific property of an existing pet. Nothing is updated if no request body is provided.
    ///
    /// - Remark: HTTP `PATCH /pets/{petId}`.
    /// - Remark: Generated from `#/paths//pets/{petId}/patch(updatePet)`.
    func updatePet(_ input: Operations.updatePet.Input) async throws -> Operations.updatePet.Output
    /// Upload an avatar
    ///
    /// - Remark: HTTP `PUT /pets/{petId}/avatar`.
    /// - Remark: Generated from `#/paths//pets/{petId}/avatar/put(uploadAvatarForPet)`.
    func uploadAvatarForPet(_ input: Operations.uploadAvatarForPet.Input) async throws
        -> Operations.uploadAvatarForPet.Output
}
/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// Example Petstore implementation service
    public static func server1() throws -> URL {
        try URL(validatingOpenAPIServerURL: "https://example.com/api")
    }
    public static func server2() throws -> URL { try URL(validatingOpenAPIServerURL: "/api") }
}
/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Pet metadata
        ///
        /// - Remark: Generated from `#/components/schemas/Pet`.
        public struct Pet: Codable, Equatable, Hashable, Sendable {
            /// Pet id
            ///
            /// - Remark: Generated from `#/components/schemas/Pet/id`.
            public var id: Swift.Int64
            /// Pet name
            ///
            /// - Remark: Generated from `#/components/schemas/Pet/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Pet/tag`.
            public var tag: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Pet/kind`.
            public var kind: Components.Schemas.PetKind?
            /// Creates a new `Pet`.
            ///
            /// - Parameters:
            ///   - id: Pet id
            ///   - name: Pet name
            ///   - tag:
            ///   - kind:
            public init(
                id: Swift.Int64,
                name: Swift.String,
                tag: Swift.String? = nil,
                kind: Components.Schemas.PetKind? = nil
            ) {
                self.id = id
                self.name = name
                self.tag = tag
                self.kind = kind
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case tag
                case kind
            }
        }
        /// Kind of pet
        ///
        /// - Remark: Generated from `#/components/schemas/PetKind`.
        @frozen
        public enum PetKind: RawRepresentable, Codable, Equatable, Hashable, Sendable,
            _AutoLosslessStringConvertible, CaseIterable
        {
            case cat
            case dog
            case ELEPHANT
            case BIG_ELEPHANT_1
            case _dollar_nake
            case _public
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "cat": self = .cat
                case "dog": self = .dog
                case "ELEPHANT": self = .ELEPHANT
                case "BIG_ELEPHANT_1": self = .BIG_ELEPHANT_1
                case "$nake": self = ._dollar_nake
                case "public": self = ._public
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .cat: return "cat"
                case .dog: return "dog"
                case .ELEPHANT: return "ELEPHANT"
                case .BIG_ELEPHANT_1: return "BIG_ELEPHANT_1"
                case ._dollar_nake: return "$nake"
                case ._public: return "public"
                }
            }
            public static var allCases: [PetKind] {
                [.cat, .dog, .ELEPHANT, .BIG_ELEPHANT_1, ._dollar_nake, ._public]
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreatePetRequest`.
        public struct CreatePetRequest: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreatePetRequest/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreatePetRequest/kind`.
            public var kind: Components.Schemas.PetKind?
            /// - Remark: Generated from `#/components/schemas/CreatePetRequest/tag`.
            public var tag: Swift.String?
            /// Creates a new `CreatePetRequest`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - kind:
            ///   - tag:
            public init(
                name: Swift.String,
                kind: Components.Schemas.PetKind? = nil,
                tag: Swift.String? = nil
            ) {
                self.name = name
                self.kind = kind
                self.tag = tag
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case kind
                case tag
            }
        }
        /// - Remark: Generated from `#/components/schemas/Pets`.
        public typealias Pets = [Components.Schemas.Pet]
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Error/code`.
            public var code: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/Error/me$sage`.
            public var me_dollar_sage: Swift.String
            /// Extra information about the error.
            ///
            /// - Remark: Generated from `#/components/schemas/Error/extraInfo`.
            public struct extraInfoPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Error/extraInfo/value1`.
                public var value1: Components.Schemas.ExtraInfo
                /// Creates a new `extraInfoPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ExtraInfo) { self.value1 = value1 }
                public init(from decoder: any Decoder) throws { value1 = try .init(from: decoder) }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// Extra information about the error.
            ///
            /// - Remark: Generated from `#/components/schemas/Error/extraInfo`.
            public var extraInfo: Components.Schemas._Error.extraInfoPayload?
            /// Custom user-provided key-value pairs.
            ///
            /// - Remark: Generated from `#/components/schemas/Error/userData`.
            public var userData: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - code:
            ///   - me_dollar_sage:
            ///   - extraInfo: Extra information about the error.
            ///   - userData: Custom user-provided key-value pairs.
            public init(
                code: Swift.Int32,
                me_dollar_sage: Swift.String,
                extraInfo: Components.Schemas._Error.extraInfoPayload? = nil,
                userData: OpenAPIRuntime.OpenAPIObjectContainer? = nil
            ) {
                self.code = code
                self.me_dollar_sage = me_dollar_sage
                self.extraInfo = extraInfo
                self.userData = userData
            }
            public enum CodingKeys: String, CodingKey {
                case code
                case me_dollar_sage = "me$sage"
                case extraInfo
                case userData
            }
        }
        /// - Remark: Generated from `#/components/schemas/PetFeeding`.
        public struct PetFeeding: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PetFeeding/schedule`.
            @frozen
            public enum schedulePayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case hourly
                case daily
                case weekly
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "hourly": self = .hourly
                    case "daily": self = .daily
                    case "weekly": self = .weekly
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .hourly: return "hourly"
                    case .daily: return "daily"
                    case .weekly: return "weekly"
                    }
                }
                public static var allCases: [schedulePayload] { [.hourly, .daily, .weekly] }
            }
            /// - Remark: Generated from `#/components/schemas/PetFeeding/schedule`.
            public var schedule: Components.Schemas.PetFeeding.schedulePayload?
            /// Creates a new `PetFeeding`.
            ///
            /// - Parameters:
            ///   - schedule:
            public init(schedule: Components.Schemas.PetFeeding.schedulePayload? = nil) {
                self.schedule = schedule
            }
            public enum CodingKeys: String, CodingKey { case schedule }
        }
        /// - Remark: Generated from `#/components/schemas/DOB`.
        public typealias DOB = Foundation.Date
        /// - Remark: Generated from `#/components/schemas/ExtraInfo`.
        public typealias ExtraInfo = Swift.String
        /// - Remark: Generated from `#/components/schemas/NoAdditionalProperties`.
        public struct NoAdditionalProperties: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NoAdditionalProperties/foo`.
            public var foo: Swift.String?
            /// Creates a new `NoAdditionalProperties`.
            ///
            /// - Parameters:
            ///   - foo:
            public init(foo: Swift.String? = nil) { self.foo = foo }
            public enum CodingKeys: String, CodingKey { case foo }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                foo = try container.decodeIfPresent(Swift.String.self, forKey: .foo)
                try decoder.ensureNoAdditionalProperties(knownKeys: ["foo"])
            }
        }
        /// - Remark: Generated from `#/components/schemas/AnyAdditionalProperties`.
        public struct AnyAdditionalProperties: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AnyAdditionalProperties/foo`.
            public var foo: Swift.String?
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `AnyAdditionalProperties`.
            ///
            /// - Parameters:
            ///   - foo:
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                foo: Swift.String? = nil,
                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
            ) {
                self.foo = foo
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey { case foo }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                foo = try container.decodeIfPresent(Swift.String.self, forKey: .foo)
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: ["foo"])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(foo, forKey: .foo)
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/TypedAdditionalProperties`.
        public struct TypedAdditionalProperties: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TypedAdditionalProperties/foo`.
            public var foo: Swift.String?
            /// A container of undocumented properties.
            public var additionalProperties: [String: Swift.Int]
            /// Creates a new `TypedAdditionalProperties`.
            ///
            /// - Parameters:
            ///   - foo:
            ///   - additionalProperties: A container of undocumented properties.
            public init(
                foo: Swift.String? = nil,
                additionalProperties: [String: Swift.Int] = .init()
            ) {
                self.foo = foo
                self.additionalProperties = additionalProperties
            }
            public enum CodingKeys: String, CodingKey { case foo }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                foo = try container.decodeIfPresent(Swift.String.self, forKey: .foo)
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: ["foo"])
            }
            public func encode(to encoder: any Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                try container.encodeIfPresent(foo, forKey: .foo)
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/CodeError`.
        public struct CodeError: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CodeError/code`.
            public var code: Swift.Int
            /// Creates a new `CodeError`.
            ///
            /// - Parameters:
            ///   - code:
            public init(code: Swift.Int) { self.code = code }
            public enum CodingKeys: String, CodingKey { case code }
        }
        /// - Remark: Generated from `#/components/schemas/AllOfObjects`.
        public struct AllOfObjects: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AllOfObjects/value1`.
            public struct Value1Payload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AllOfObjects/value1/message`.
                public var message: Swift.String
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - message:
                public init(message: Swift.String) { self.message = message }
                public enum CodingKeys: String, CodingKey { case message }
            }
            /// - Remark: Generated from `#/components/schemas/AllOfObjects/value1`.
            public var value1: Components.Schemas.AllOfObjects.Value1Payload
            /// - Remark: Generated from `#/components/schemas/AllOfObjects/value2`.
            public var value2: Components.Schemas.CodeError
            /// Creates a new `AllOfObjects`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.AllOfObjects.Value1Payload,
                value2: Components.Schemas.CodeError
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/AnyOfObjects`.
        public struct AnyOfObjects: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AnyOfObjects/value1`.
            public struct Value1Payload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AnyOfObjects/value1/message`.
                public var message: Swift.String
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - message:
                public init(message: Swift.String) { self.message = message }
                public enum CodingKeys: String, CodingKey { case message }
            }
            /// - Remark: Generated from `#/components/schemas/AnyOfObjects/value1`.
            public var value1: Components.Schemas.AnyOfObjects.Value1Payload?
            /// - Remark: Generated from `#/components/schemas/AnyOfObjects/value2`.
            public var value2: Components.Schemas.CodeError?
            /// Creates a new `AnyOfObjects`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.AnyOfObjects.Value1Payload? = nil,
                value2: Components.Schemas.CodeError? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try? .init(from: decoder)
                value2 = try? .init(from: decoder)
                try DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [value1, value2],
                    type: Self.self,
                    codingPath: decoder.codingPath
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try value1?.encode(to: encoder)
                try value2?.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/OneOfAny`.
        @frozen public enum OneOfAny: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OneOfAny/case1`.
            case case1(Swift.String)
            /// - Remark: Generated from `#/components/schemas/OneOfAny/case2`.
            case case2(Swift.Int)
            /// - Remark: Generated from `#/components/schemas/OneOfAny/case3`.
            case CodeError(Components.Schemas.CodeError)
            /// - Remark: Generated from `#/components/schemas/OneOfAny/case4`.
            public struct Case4Payload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/OneOfAny/case4/message`.
                public var message: Swift.String
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - message:
                public init(message: Swift.String) { self.message = message }
                public enum CodingKeys: String, CodingKey { case message }
            }
            /// - Remark: Generated from `#/components/schemas/OneOfAny/case4`.
            case case4(Components.Schemas.OneOfAny.Case4Payload)
            /// Parsed a case that was not defined in the OpenAPI document.
            case undocumented(OpenAPIRuntime.OpenAPIValueContainer)
            public init(from decoder: any Decoder) throws {
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {}
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {}
                do {
                    self = .CodeError(try .init(from: decoder))
                    return
                } catch {}
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {}
                let container = try decoder.singleValueContainer()
                let value = try container.decode(OpenAPIRuntime.OpenAPIValueContainer.self)
                self = .undocumented(value)
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value): try value.encode(to: encoder)
                case let .case2(value): try value.encode(to: encoder)
                case let .CodeError(value): try value.encode(to: encoder)
                case let .case4(value): try value.encode(to: encoder)
                case let .undocumented(value): try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/PetExercise`.
        public struct PetExercise: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PetExercise/kind`.
            public var kind: Swift.String
            /// Creates a new `PetExercise`.
            ///
            /// - Parameters:
            ///   - kind:
            public init(kind: Swift.String) { self.kind = kind }
            public enum CodingKeys: String, CodingKey { case kind }
        }
        /// - Remark: Generated from `#/components/schemas/Walk`.
        public struct Walk: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Walk/kind`.
            public var kind: Swift.String
            /// - Remark: Generated from `#/components/schemas/Walk/length`.
            public var length: Swift.Int
            /// Creates a new `Walk`.
            ///
            /// - Parameters:
            ///   - kind:
            ///   - length:
            public init(kind: Swift.String, length: Swift.Int) {
                self.kind = kind
                self.length = length
            }
            public enum CodingKeys: String, CodingKey {
                case kind
                case length
            }
        }
        /// - Remark: Generated from `#/components/schemas/MessagedExercise`.
        public struct MessagedExercise: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MessagedExercise/value1`.
            public var value1: Components.Schemas.PetExercise
            /// - Remark: Generated from `#/components/schemas/MessagedExercise/value2`.
            public struct Value2Payload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/MessagedExercise/value2/message`.
                public var message: Swift.String
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - message:
                public init(message: Swift.String) { self.message = message }
                public enum CodingKeys: String, CodingKey { case message }
            }
            /// - Remark: Generated from `#/components/schemas/MessagedExercise/value2`.
            public var value2: Components.Schemas.MessagedExercise.Value2Payload
            /// Creates a new `MessagedExercise`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.PetExercise,
                value2: Components.Schemas.MessagedExercise.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/OneOfObjectsWithDiscriminator`.
        @frozen public enum OneOfObjectsWithDiscriminator: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OneOfObjectsWithDiscriminator/case1`.
            case Walk(Components.Schemas.Walk)
            /// - Remark: Generated from `#/components/schemas/OneOfObjectsWithDiscriminator/case2`.
            case MessagedExercise(Components.Schemas.MessagedExercise)
            /// Parsed a case that was not defined in the OpenAPI document.
            case undocumented(OpenAPIRuntime.OpenAPIObjectContainer)
            public enum CodingKeys: String, CodingKey { case kind }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                let discriminator = try container.decode(String.self, forKey: .kind)
                switch discriminator {
                case "Walk": self = .Walk(try .init(from: decoder))
                case "MessagedExercise": self = .MessagedExercise(try .init(from: decoder))
                default:
                    let container = try decoder.singleValueContainer()
                    let value = try container.decode(OpenAPIRuntime.OpenAPIObjectContainer.self)
                    self = .undocumented(value)
                }
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .Walk(value): try value.encode(to: encoder)
                case let .MessagedExercise(value): try value.encode(to: encoder)
                case let .undocumented(value): try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeprecatedObject`.
        @available(*, deprecated)
        public struct DeprecatedObject: Codable, Equatable, Hashable, Sendable {
            /// Creates a new `DeprecatedObject`.
            public init() {}
            public init(from decoder: any Decoder) throws {
                try decoder.ensureNoAdditionalProperties(knownKeys: [])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ObjectWithDeprecatedProperty`.
        public struct ObjectWithDeprecatedProperty: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ObjectWithDeprecatedProperty/message`.
            @available(*, deprecated) public var message: Swift.String?
            /// Creates a new `ObjectWithDeprecatedProperty`.
            ///
            /// - Parameters:
            ///   - message:
            public init(message: Swift.String? = nil) { self.message = message }
            public enum CodingKeys: String, CodingKey { case message }
        }
        /// - Remark: Generated from `#/components/schemas/PetStats`.
        public struct PetStats: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PetStats/count`.
            public var count: Swift.Int
            /// Creates a new `PetStats`.
            ///
            /// - Parameters:
            ///   - count:
            public init(count: Swift.Int) { self.count = count }
            public enum CodingKeys: String, CodingKey { case count }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// Supply this parameter to filter pets born since the provided date.
        ///
        /// - Remark: Generated from `#/components/parameters/query.born-since`.
        public typealias query_period_born_hyphen_since = Components.Schemas.DOB
        /// The id of the pet to retrieve
        ///
        /// - Remark: Generated from `#/components/parameters/path.petId`.
        public typealias path_period_petId = Swift.Int64
        /// A deprecated header parameter
        ///
        /// - Remark: Generated from `#/components/parameters/header.deprecatedHeader`.
        public typealias header_period_deprecatedHeader = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {
        @frozen public enum UpdatePetRequest: Sendable, Equatable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/UpdatePetRequest/json`.
            public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/UpdatePetRequest/json/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/requestBodies/UpdatePetRequest/json/kind`.
                public var kind: Components.Schemas.PetKind?
                /// - Remark: Generated from `#/components/requestBodies/UpdatePetRequest/json/tag`.
                public var tag: Swift.String?
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - kind:
                ///   - tag:
                public init(
                    name: Swift.String? = nil,
                    kind: Components.Schemas.PetKind? = nil,
                    tag: Swift.String? = nil
                ) {
                    self.name = name
                    self.kind = kind
                    self.tag = tag
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case kind
                    case tag
                }
            }
            case json(Components.RequestBodies.UpdatePetRequest.jsonPayload)
        }
    }
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct ErrorBadRequest: Sendable, Equatable, Hashable {
            public struct Headers: Sendable, Equatable, Hashable {
                public var X_hyphen_Reason: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Reason:
                public init(X_hyphen_Reason: Swift.String? = nil) {
                    self.X_hyphen_Reason = X_hyphen_Reason
                }
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.ErrorBadRequest.Headers
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/components/responses/ErrorBadRequest/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/ErrorBadRequest/json/code`.
                    public var code: Swift.Int
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    public init(code: Swift.Int) { self.code = code }
                    public enum CodingKeys: String, CodingKey { case code }
                }
                case json(Components.Responses.ErrorBadRequest.Body.jsonPayload)
            }
            /// Received HTTP response body
            public var body: Components.Responses.ErrorBadRequest.Body
            /// Creates a new `ErrorBadRequest`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            public init(
                headers: Components.Responses.ErrorBadRequest.Headers = .init(),
                body: Components.Responses.ErrorBadRequest.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/TracingHeader`.
        public typealias TracingHeader = Swift.String
    }
}
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List all pets
    ///
    /// You can fetch
    /// all the pets here
    ///
    /// - Remark: HTTP `GET /pets`.
    /// - Remark: Generated from `#/paths//pets/get(listPets)`.
    public enum listPets {
        public static let id: String = "listPets"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.listPets.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var limit: Swift.Int32?
                /// - Remark: Generated from `#/paths/pets/GET/query/habitat`.
                @frozen
                public enum habitatPayload: RawRepresentable, Codable, Equatable, Hashable,
                    Sendable, _AutoLosslessStringConvertible, CaseIterable
                {
                    case water
                    case land
                    case air
                    case _empty
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "water": self = .water
                        case "land": self = .land
                        case "air": self = .air
                        case "": self = ._empty
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .water: return "water"
                        case .land: return "land"
                        case .air: return "air"
                        case ._empty: return ""
                        }
                    }
                    public static var allCases: [habitatPayload] { [.water, .land, .air, ._empty] }
                }
                public var habitat: Operations.listPets.Input.Query.habitatPayload?
                /// - Remark: Generated from `#/paths/pets/GET/query/feedsPayload`.
                @frozen
                public enum feedsPayloadPayload: RawRepresentable, Codable, Equatable, Hashable,
                    Sendable, _AutoLosslessStringConvertible, CaseIterable
                {
                    case omnivore
                    case carnivore
                    case herbivore
                    /// Parsed a raw value that was not defined in the OpenAPI document.
                    case undocumented(String)
                    public init?(rawValue: String) {
                        switch rawValue {
                        case "omnivore": self = .omnivore
                        case "carnivore": self = .carnivore
                        case "herbivore": self = .herbivore
                        default: self = .undocumented(rawValue)
                        }
                    }
                    public var rawValue: String {
                        switch self {
                        case let .undocumented(string): return string
                        case .omnivore: return "omnivore"
                        case .carnivore: return "carnivore"
                        case .herbivore: return "herbivore"
                        }
                    }
                    public static var allCases: [feedsPayloadPayload] {
                        [.omnivore, .carnivore, .herbivore]
                    }
                }
                /// - Remark: Generated from `#/paths/pets/GET/query/feeds`.
                public typealias feedsPayload = [Operations.listPets.Input.Query
                    .feedsPayloadPayload]
                public var feeds: Operations.listPets.Input.Query.feedsPayload?
                public var since: Components.Parameters.query_period_born_hyphen_since?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit:
                ///   - habitat:
                ///   - feeds:
                ///   - since:
                public init(
                    limit: Swift.Int32? = nil,
                    habitat: Operations.listPets.Input.Query.habitatPayload? = nil,
                    feeds: Operations.listPets.Input.Query.feedsPayload? = nil,
                    since: Components.Parameters.query_period_born_hyphen_since? = nil
                ) {
                    self.limit = limit
                    self.habitat = habitat
                    self.feeds = feeds
                    self.since = since
                }
            }
            public var query: Operations.listPets.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                public var My_hyphen_Request_hyphen_UUID: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - My_hyphen_Request_hyphen_UUID:
                public init(My_hyphen_Request_hyphen_UUID: Swift.String? = nil) {
                    self.My_hyphen_Request_hyphen_UUID = My_hyphen_Request_hyphen_UUID
                }
            }
            public var headers: Operations.listPets.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.listPets.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.listPets.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.listPets.Input.Path = .init(),
                query: Operations.listPets.Input.Query = .init(),
                headers: Operations.listPets.Input.Headers = .init(),
                cookies: Operations.listPets.Input.Cookies = .init(),
                body: Operations.listPets.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    public var My_hyphen_Response_hyphen_UUID: Swift.String
                    public var My_hyphen_Tracing_hyphen_Header: Components.Headers.TracingHeader?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - My_hyphen_Response_hyphen_UUID:
                    ///   - My_hyphen_Tracing_hyphen_Header:
                    public init(
                        My_hyphen_Response_hyphen_UUID: Swift.String,
                        My_hyphen_Tracing_hyphen_Header: Components.Headers.TracingHeader? = nil
                    ) {
                        self.My_hyphen_Response_hyphen_UUID = My_hyphen_Response_hyphen_UUID
                        self.My_hyphen_Tracing_hyphen_Header = My_hyphen_Tracing_hyphen_Header
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.listPets.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Pets)
                }
                /// Received HTTP response body
                public var body: Operations.listPets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.listPets.Output.Ok.Headers,
                    body: Operations.listPets.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A paged array of pets
            ///
            /// - Remark: Generated from `#/paths//pets/get(listPets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listPets.Output.Ok)
            public struct Default: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.listPets.Output.Default.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.listPets.Output.Default.Body
                /// Creates a new `Default`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.listPets.Output.Default.Headers = .init(),
                    body: Operations.listPets.Output.Default.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Unexpected error
            ///
            /// - Remark: Generated from `#/paths//pets/get(listPets)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Int, Operations.listPets.Output.Default)
        }
    }
    /// Create a pet
    ///
    /// - Remark: HTTP `POST /pets`.
    /// - Remark: Generated from `#/paths//pets/post(createPet)`.
    public enum createPet {
        public static let id: String = "createPet"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.createPet.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.createPet.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                public var X_hyphen_Extra_hyphen_Arguments: Components.Schemas.CodeError?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Extra_hyphen_Arguments:
                public init(X_hyphen_Extra_hyphen_Arguments: Components.Schemas.CodeError? = nil) {
                    self.X_hyphen_Extra_hyphen_Arguments = X_hyphen_Extra_hyphen_Arguments
                }
            }
            public var headers: Operations.createPet.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.createPet.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.CreatePetRequest)
            }
            public var body: Operations.createPet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.createPet.Input.Path = .init(),
                query: Operations.createPet.Input.Query = .init(),
                headers: Operations.createPet.Input.Headers = .init(),
                cookies: Operations.createPet.Input.Cookies = .init(),
                body: Operations.createPet.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Created: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    public var X_hyphen_Extra_hyphen_Arguments: Components.Schemas.CodeError?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - X_hyphen_Extra_hyphen_Arguments:
                    public init(
                        X_hyphen_Extra_hyphen_Arguments: Components.Schemas.CodeError? = nil
                    ) { self.X_hyphen_Extra_hyphen_Arguments = X_hyphen_Extra_hyphen_Arguments }
                }
                /// Received HTTP response headers
                public var headers: Operations.createPet.Output.Created.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Pet)
                }
                /// Received HTTP response body
                public var body: Operations.createPet.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createPet.Output.Created.Headers = .init(),
                    body: Operations.createPet.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Successfully created pet
            ///
            /// - Remark: Generated from `#/paths//pets/post(createPet)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.createPet.Output.Created)
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//pets/post(createPet)/responses/4XX`.
            ///
            /// HTTP response code: `400...499 clientError`.
            case clientError(statusCode: Int, Components.Responses.ErrorBadRequest)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `GET /pets/stats`.
    /// - Remark: Generated from `#/paths//pets/stats/get(getStats)`.
    public enum getStats {
        public static let id: String = "getStats"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.getStats.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.getStats.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.getStats.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.getStats.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.getStats.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.getStats.Input.Path = .init(),
                query: Operations.getStats.Input.Query = .init(),
                headers: Operations.getStats.Input.Headers = .init(),
                cookies: Operations.getStats.Input.Cookies = .init(),
                body: Operations.getStats.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.getStats.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.PetStats)
                    case plainText(Swift.String)
                    case binary(Foundation.Data)
                }
                /// Received HTTP response body
                public var body: Operations.getStats.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.getStats.Output.Ok.Headers = .init(),
                    body: Operations.getStats.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A successful response.
            ///
            /// - Remark: Generated from `#/paths//pets/stats/get(getStats)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getStats.Output.Ok)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `POST /pets/stats`.
    /// - Remark: Generated from `#/paths//pets/stats/post(postStats)`.
    public enum postStats {
        public static let id: String = "postStats"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.postStats.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.postStats.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.postStats.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.postStats.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.PetStats)
                case plainText(Swift.String)
                case binary(Foundation.Data)
            }
            public var body: Operations.postStats.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.postStats.Input.Path = .init(),
                query: Operations.postStats.Input.Query = .init(),
                headers: Operations.postStats.Input.Headers = .init(),
                cookies: Operations.postStats.Input.Cookies = .init(),
                body: Operations.postStats.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Accepted: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.postStats.Output.Accepted.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.postStats.Output.Accepted.Body?
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.postStats.Output.Accepted.Headers = .init(),
                    body: Operations.postStats.Output.Accepted.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Accepted data.
            ///
            /// - Remark: Generated from `#/paths//pets/stats/post(postStats)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.postStats.Output.Accepted)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `POST /probe/`.
    /// - Remark: Generated from `#/paths//probe//post(probe)`.
    public enum probe {
        public static let id: String = "probe"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.probe.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.probe.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.probe.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.probe.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.probe.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.probe.Input.Path = .init(),
                query: Operations.probe.Input.Query = .init(),
                headers: Operations.probe.Input.Headers = .init(),
                cookies: Operations.probe.Input.Cookies = .init(),
                body: Operations.probe.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.probe.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.probe.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.probe.Output.NoContent.Headers = .init(),
                    body: Operations.probe.Output.NoContent.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Ack
            ///
            /// - Remark: Generated from `#/paths//probe//post(probe)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.probe.Output.NoContent)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Update just a specific property of an existing pet. Nothing is updated if no request body is provided.
    ///
    /// - Remark: HTTP `PATCH /pets/{petId}`.
    /// - Remark: Generated from `#/paths//pets/{petId}/patch(updatePet)`.
    public enum updatePet {
        public static let id: String = "updatePet"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var petId: Swift.Int64
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - petId:
                public init(petId: Swift.Int64) { self.petId = petId }
            }
            public var path: Operations.updatePet.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.updatePet.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.updatePet.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.updatePet.Input.Cookies
            public var body: Components.RequestBodies.UpdatePetRequest?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.updatePet.Input.Path,
                query: Operations.updatePet.Input.Query = .init(),
                headers: Operations.updatePet.Input.Headers = .init(),
                cookies: Operations.updatePet.Input.Cookies = .init(),
                body: Components.RequestBodies.UpdatePetRequest? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updatePet.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.updatePet.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updatePet.Output.NoContent.Headers = .init(),
                    body: Operations.updatePet.Output.NoContent.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Successfully updated
            ///
            /// - Remark: Generated from `#/paths//pets/{petId}/patch(updatePet)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.updatePet.Output.NoContent)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updatePet.Output.BadRequest.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    /// - Remark: Generated from `#/paths/pets/{petId}/PATCH/json`.
                    public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/pets/{petId}/PATCH/json/message`.
                        public var message: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        public init(message: Swift.String) { self.message = message }
                        public enum CodingKeys: String, CodingKey { case message }
                    }
                    case json(Operations.updatePet.Output.BadRequest.Body.jsonPayload)
                }
                /// Received HTTP response body
                public var body: Operations.updatePet.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updatePet.Output.BadRequest.Headers = .init(),
                    body: Operations.updatePet.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Update input error
            ///
            /// - Remark: Generated from `#/paths//pets/{petId}/patch(updatePet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.updatePet.Output.BadRequest)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Upload an avatar
    ///
    /// - Remark: HTTP `PUT /pets/{petId}/avatar`.
    /// - Remark: Generated from `#/paths//pets/{petId}/avatar/put(uploadAvatarForPet)`.
    public enum uploadAvatarForPet {
        public static let id: String = "uploadAvatarForPet"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var petId: Components.Parameters.path_period_petId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - petId:
                public init(petId: Components.Parameters.path_period_petId) { self.petId = petId }
            }
            public var path: Operations.uploadAvatarForPet.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.uploadAvatarForPet.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.uploadAvatarForPet.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.uploadAvatarForPet.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable { case binary(Foundation.Data) }
            public var body: Operations.uploadAvatarForPet.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.uploadAvatarForPet.Input.Path,
                query: Operations.uploadAvatarForPet.Input.Query = .init(),
                headers: Operations.uploadAvatarForPet.Input.Headers = .init(),
                cookies: Operations.uploadAvatarForPet.Input.Cookies = .init(),
                body: Operations.uploadAvatarForPet.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.uploadAvatarForPet.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case binary(Foundation.Data)
                }
                /// Received HTTP response body
                public var body: Operations.uploadAvatarForPet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.uploadAvatarForPet.Output.Ok.Headers = .init(),
                    body: Operations.uploadAvatarForPet.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Echoes avatar back
            ///
            /// - Remark: Generated from `#/paths//pets/{petId}/avatar/put(uploadAvatarForPet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.uploadAvatarForPet.Output.Ok)
            public struct PreconditionFailed: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.uploadAvatarForPet.Output.PreconditionFailed.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable { case json(Swift.String) }
                /// Received HTTP response body
                public var body: Operations.uploadAvatarForPet.Output.PreconditionFailed.Body
                /// Creates a new `PreconditionFailed`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.uploadAvatarForPet.Output.PreconditionFailed.Headers =
                        .init(),
                    body: Operations.uploadAvatarForPet.Output.PreconditionFailed.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Avatar is not acceptable
            ///
            /// - Remark: Generated from `#/paths//pets/{petId}/avatar/put(uploadAvatarForPet)/responses/412`.
            ///
            /// HTTP response code: `412 preconditionFailed`.
            case preconditionFailed(Operations.uploadAvatarForPet.Output.PreconditionFailed)
            public struct InternalServerError: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.uploadAvatarForPet.Output.InternalServerError.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case plainText(Swift.String)
                }
                /// Received HTTP response body
                public var body: Operations.uploadAvatarForPet.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.uploadAvatarForPet.Output.InternalServerError.Headers =
                        .init(),
                    body: Operations.uploadAvatarForPet.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Server error
            ///
            /// - Remark: Generated from `#/paths//pets/{petId}/avatar/put(uploadAvatarForPet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.uploadAvatarForPet.Output.InternalServerError)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
